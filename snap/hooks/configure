#!/bin/bash -e

. "$SNAP/nginx.env"
. "$SNAP/mastodon.env"

export CURRENT_DOMAIN="$(mastodon_get_var LOCAL_DOMAIN)"
export CURRENT_HTTP_PORT="$(nginx_get_http_port)"
export CURRENT_HTTPS_PORT="$(nginx_get_https_port)"
export CURRENT_NGINX_ACCESS_LOG="$(nginx_get_access_log)"
export CURRENT_MEDIA_DIR="$(get_media_dir_link)"
export CURRENT_BACKUP_DIR="$(get_backup_dir_file)"
export CURRENT_STATUS_LENGTH="$(get_status_length_file)"

reset_restart_required redis
reset_restart_required postgres
reset_restart_required backend
reset_restart_required sidekiq
reset_restart_required streaming
reset_restart_required nginx
reset_compilation_required

if [ "$NGINX_ACCESS_LOG" != "$CURRENT_NGINX_ACCESS_LOG" ]; then
    restart_required nginx
fi

if [ "$HTTP_PORT" != "$CURRENT_HTTP_PORT" ] || \
   [ "$HTTPS_PORT" != "$CURRENT_HTTPS_PORT" ]
then
    restart_required nginx
fi

if [ "$MEDIA_DIR" != "$CURRENT_MEDIA_DIR" ]; then
    snapctl set media.dir="$CURRENT_MEDIA_DIR"
    export MEDIA_DIR="$CURRENT_MEDIA_DIR"
fi

if [ "$BACKUP_DIR" != "$CURRENT_BACKUP_DIR" ]; then
    echo "Update backup dir to $BACKUP_DIR"
    update_backup_dir_file
fi

if [ "$STATUS_LENGTH" != "$CURRENT_STATUS_LENGTH" ]; then
    if ! is_number "$STATUS_LENGTH"; then
        echo_error "STATUS.LENGTH must be a number! Change the value of STATUS.LENGTH to fix this."
    else
        echo Update status length
        update_status_length
        compilation_required
        restart_required backend
        restart_required sidekiq
        restart_required streaming
    fi
fi

if mastodon_config_exists; then
    if [ "$DOMAIN" != "$CURRENT_DOMAIN" ]; then
        echo_error "DOMAIN cannot be changed safely! Setup a new instance if you really want to change it."
        snapctl set domain=$CURRENT_DOMAIN
        export DOMAIN="$CURRENT_DOMAIN"
    fi
fi

echo Restart services

snapctl start "$SNAP_NAME.recompile-assets"
snapctl start "$SNAP_NAME.postgres-upgrade"

restart_service_if_required redis
restart_service_if_required postgres
restart_service_if_required backend
restart_service_if_required sidekiq
restart_service_if_required streaming
restart_service_if_required nginx
