name: mastodon-server
summary: Unofficial snap for Mastodon (decentralized social media)
description: |
  Mastodon is a free, open-source social network server based on ActivityPub
  where users can follow friends and discover new ones. On Mastodon, users can
  publish anything they want: links, pictures, text, video. All Mastodon servers
  are interoperable as a federated network (users on one server can seamlessly
  communicate with users from another one, including non-Mastodon software that
  implements ActivityPub!)

base: core24
version: 4.3.3snap3
grade: stable
confinement: strict

platforms:
  amd64:
    build-on: amd64
  # TODO: Test on arm64
  # arm64:
  #   build-on: arm64

# TODO: From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
system-usernames:
  snap_daemon:
    scope: shared

environment:
  PATH: $SNAP/bin:$SNAP/usr/bin:$PATH
  LD_LIBRARY_PATH: $SNAP/lib
  LD_PRELOAD: libjemalloc.so.2
  RUBYLIB: $SNAP/ruby/lib/ruby/3.3.0:$SNAP/ruby/lib/ruby/3.3.0/$SNAP_ARCH
  RAILS_ENV: production
  NODE_ENV: production
  RAILS_SERVE_STATIC_FILES: "true"
  MAGIC: $SNAP/lib/file/magic.mgc

hooks:
  post-refresh:
    plugs:
      - network

apps:
  logrotate:
    command: bin/logrotate.wrapper
    daemon: simple
    timer: 00:00

  postgres-upgrade:
    command: bin/postgres-upgrade
    daemon: simple
    plugs:
      - network
      - network-bind
      - removable-media

  postgres:
    command: bin/run_as_daemon_user postgres.wrapper
    daemon: simple
    # TODO: refresh-mode: endure
    stop-command: bin/pre_refresh_tasks
    stop-timeout: 30m
    after:
      - postgres-upgrade
    plugs:
      - network
      - network-bind
      - removable-media

  redis:
    command: bin/run_as_daemon_user redis.wrapper
    daemon: simple
    # TODO: refresh-mode: endure
    plugs:
      - network
      - network-bind
      - removable-media

  recompile-assets:
    command: bin/recompile_if_required
    daemon: oneshot
    plugs:
      - network
      - network-bind

  migrations:
    command: bin/post_refresh_tasks
    daemon: oneshot
    after:
      - postgres
    plugs:
      - network
      - network-bind

  backend:
    command: bin/run_as_daemon_user backend
    daemon: simple
    # TODO: refresh-mode: endure
    after:
      - postgres
      - redis
      - migrations
      - recompile-assets
    plugs:
      - network
      - network-bind
      - removable-media

  sidekiq:
    command: bin/run_as_daemon_user sidekiq
    daemon: simple
    # TODO: refresh-mode: endure
    after:
      - postgres
      - redis
      - migrations
      - recompile-assets
    environment:
      MALLOC_ARENA_MAX: 2
    plugs:
      - network
      - network-bind
      - removable-media

  streaming:
    command: bin/run_as_daemon_user streaming
    daemon: simple
    # TODO: refresh-mode: endure
    after:
      - redis
      - recompile-assets
    plugs:
      - network
      - network-bind
      - removable-media

  nginx:
    command: bin/nginx.wrapper
    stop-command: bin/nginx.wrapper -s quit
    reload-command: bin/nginx.wrapper -s reload
    daemon: simple
    # TODO: refresh-mode: endure
    after:
      - backend
      - streaming
    environment:
      LD_PRELOAD: $SNAP/lib/wraplib.so
    plugs:
      - network
      - network-bind
      - removable-media

  setup:
    command: bin/setup
    plugs:
      - network
      - removable-media

  tootctl:
    command: bin/tootctl.wrapper
    plugs:
      - network
      - removable-media

  maintenance:
    command: bin/maintenance
    plugs:
      - network
      - removable-media

  external-media-dir:
    command: bin/external_media_dir
    plugs:
      - network
      - removable-media

  psql:
    command: bin/psql.wrapper

  export:
    command: bin/export
    plugs:
      - removable-media

  restore:
    command: bin/restore
    completer: restore.bash-completer
    plugs:
      - network
      - removable-media

  backup:
    command: bin/backup
    daemon: simple
    timer: 00:00
    plugs:
      - removable-media

  acme:
    command: bin/run_as_daemon_user acme.sh-renew.wrapper
    daemon: simple
    timer: 03:00

  console:
    command: bin/rails-console.wrapper
    plugs:
      - network
      - network-bind

  db-migrate:
    command: bin/db-migrate
    plugs:
      - network

  db-rollback:
    command: bin/db-rollback
    plugs:
      - network

  db-dump:
    command: bin/db-dump
    plugs:
      - network

  generate-secret:
    command: bin/rails-secret.wrapper
    plugs:
      - network

  generate-vapid-key:
    command: bin/rails-generate-vapid-key.wrapper
    plugs:
      - network

  generate-db-encryption-keys:
    command: bin/rails-db-encryption-init.wrapper
    plugs:
      - network

  get-certificate:
    command: bin/get-certificate
    plugs:
      - network
      - network-bind

  cleanup:
    command: bin/cleanup
    daemon: simple
    timer: 00:00
    plugs:
      - network
      - removable-media

parts:
  license:
    plugin: dump
    source: .
    stage:
      - LICENSE

  base:
    plugin: dump
    source: src/snap/

  envsubst:
    plugin: nil
    stage-packages:
      - gettext-base
    organize:
      usr/bin/envsubst: bin/
    stage:
      - bin/envsubst

  curl:
    plugin: nil
    stage-packages:
      - curl
    organize:
      usr/bin/curl: bin/
      usr/lib/*-linux-gnu/*.so*: lib/
    stage:
      - bin/curl
      - lib/*.so*

  rsync:
    plugin: nil
    stage-packages:
      - rsync
      - libpopt0
    organize:
      usr/bin/rsync: bin/
      usr/lib/*-linux-gnu/libpopt.so*: lib/
    stage:
      - bin/rsync
      - lib/libpopt.so*

  setpriv:
    plugin: nil
    stage-packages:
      - util-linux
    organize:
      usr/bin/setpriv: bin/
    stage:
      - bin/setpriv

  wraplib:
    after:
      - setpriv
    plugin: make
    source: src/wraplib/
    build-packages:
      - clang
    build-environment:
      - CC: clang

  loganon:
    plugin: nil
    stage-packages:
      - ipv6calc
      - libmaxminddb0
    organize:
      usr/bin/ipv6loganon: bin/
      usr/lib/*-linux-gnu/*.so*: lib/
    stage:
      - bin/ipv6loganon
      - lib/libmaxminddb.so.*

  musl-libc:
    plugin: nil
    stage-packages:
      - musl
    override-build: |
      craftctl default
      set -eux
      case "$SNAP_ARCH" in
      "amd64")
        target="x86_64"
        ;;
      "arm64")
        target="aarch64"
        ;;
      *)
        echo "Unsupported architecture $SNAP_ARCH"
        exit 1
        ;;
      esac
      mkdir -p $CRAFT_PART_INSTALL/lib
      ln -sfn $target-linux-musl/libc.so $CRAFT_PART_INSTALL/lib/libc.musl-$target.so.1
    stage:
      - lib/*-linux-musl/libc.so
      - lib/libc.musl-*.so*

  libjemalloc2:
    plugin: nil
    stage-packages:
      - libjemalloc2
    organize:
      usr/lib/*/libjemalloc.so.2: lib/
    stage:
      - lib/libjemalloc.so.2

  logrotate:
    after:
      - logrotate-customizations
      - loganon
    # NOTE: https://github.com/logrotate/logrotate/releases/latest
    source: https://github.com/logrotate/logrotate/releases/download/3.22.0/logrotate-3.22.0.tar.gz
    source-checksum: sha256/93154424e73094d923a54de0d358007457282df7e14ee999a7c10d153e2c347e
    plugin: autotools
    build-packages:
      - autoconf
      - automake
      - libpopt-dev
      - libtool
      - make
      - xz-utils
    override-build: |
      set -eux
      autoreconf -fiv
      ./configure
      make -j"$(nproc)"
      make install DESTDIR=$CRAFT_PART_INSTALL/logrotate
      cp -f $CRAFT_PART_SRC/COPYING $CRAFT_PART_INSTALL/logrotate/
    organize:
      logrotate/usr/local/sbin/logrotate: logrotate/bin/logrotate
    stage:
      - logrotate/COPYING
      - logrotate/bin/logrotate

  logrotate-customizations:
    plugin: dump
    source: src/logrotate/
    organize:
      config/*: config/logrotate/

  postgres:
    after:
      - postgres-customizations
      - setpriv
      - envsubst
    # NOTE: https://www.postgresql.org/ftp/latest
    source: https://ftp.postgresql.org/pub/source/v17.3/postgresql-17.3.tar.gz
    source-checksum: sha256/0229bb3352126771b89a4abee5930b5dc881870cf23ff0fc8c6cc901cb9d5e56
    plugin: autotools
    build-packages:
      - clang
      - flex
      - bison
      - libreadline-dev
      - zlib1g-dev
      - libicu-dev
    stage-packages:
      - libreadline8t64
      - zlib1g
      - libicu74
    build-environment:
      - PATH: $CRAFT_STAGE/postgres/bin:$PATH
      - LD_LIBRARY_PATH: $CRAFT_STAGE/postgres/lib
      - CC: clang
      - CXX: clang++
    override-build: |
      set -eux
      ./configure --prefix=$CRAFT_PART_INSTALL/postgres
      make -j"$(nproc)"
      make install
      cd contrib/pg_stat_statements
      make -j"$(nproc)"
      make install
      cp -f $CRAFT_PART_SRC/COPYRIGHT $CRAFT_PART_INSTALL/postgres/
    stage:
      - -postgres/lib/share
      - -postgres/lib/pgxs
      - -postgres/lib/pkgconfig
      - -postgres/lib/libecpg*
      - -postgres/lib/libpgtypes.so*
      - -usr/lib/*-linux-gnu/libicutest.so*
      - -usr/lib/*-linux-gnu/libicutu.so*

  postgres-customizations:
    plugin: dump
    source: src/postgres/
    organize:
      config/*: config/postgres/

  nginx:
    after:
      - nginx-customizations
      - wraplib
    # NOTE: https://nginx.org/en/download.html (mainline version)
    source: https://nginx.org/download/nginx-1.27.4.tar.gz
    source-checksum: sha256/294816f879b300e621fa4edd5353dd1ec00badb056399eceb30de7db64b753b2
    plugin: autotools
    build-environment:
      - PATH: $CRAFT_STAGE/nginx/bin:$PATH
      - LD_LIBRARY_PATH: $CRAFT_STAGE/nginx/lib
    build-packages:
      - build-essential
      - libpcre3-dev
      - zlib1g-dev
      - libssl-dev
    stage-packages:
      - zlib1g
      - libssl3t64
    override-build: |
      set -eux
      ./configure \
        --prefix=$CRAFT_PART_INSTALL/nginx \
        --user=root \
        --group=root \
        --with-stream \
        --with-stream_ssl_module \
        --with-http_ssl_module \
        --with-http_v2_module
      make -j"$(nproc)"
      make install
      cp -f $CRAFT_PART_SRC/LICENSE $CRAFT_PART_INSTALL/nginx/
    organize:
      nginx/sbin/nginx: nginx/bin/nginx
      nginx/conf/mime.types: nginx/
    stage:
      - -nginx/html
      - -nginx/logs
      - -nginx/conf

  nginx-customizations:
    plugin: dump
    source: src/nginx/
    organize:
      config/*: config/nginx/

  redis:
    after:
      - redis-customizations
    # NOTE: https://github.com/redis/redis/releases/latest
    source: https://download.redis.io/releases/redis-7.4.2.tar.gz
    source-checksum: sha256/4ddebbf09061cbb589011786febdb34f29767dd7f89dbe712d2b68e808af6a1f
    plugin: make
    override-build: |
      set -eux
      sed -ri "s,/sys/devices/system/clocksource/clocksource0/(current|available)_clocksource,/dev/null," $CRAFT_PART_BUILD/src/syscheck.c
      make -j"$(nproc)"
      make install PREFIX=$CRAFT_PART_INSTALL/redis
      cp -f $CRAFT_PART_SRC/LICENSE.txt $CRAFT_PART_INSTALL/redis/

  redis-customizations:
    plugin: dump
    source: src/redis/
    organize:
      config/*: config/redis/

  acme:
    after:
      - acme-customizations
      - curl
    # NOTE: https://github.com/acmesh-official/acme.sh/releases/latest
    source: https://github.com/acmesh-official/acme.sh/archive/refs/tags/3.1.0.tar.gz
    source-checksum: sha256/5bc8a72095e16a1a177d1a516728bbd3436abf8060232d5d36b462fce74447aa
    plugin: dump
    organize:
      "*": acme/
    stage:
      - acme/acme.sh
      - acme/LICENSE.md

  acme-customizations:
    after:
      - nginx-customizations
    plugin: dump
    source: src/acme/

  # Snapcraft pull is not used because advanced grammar is not supported in source-checksum.
  node:
    after:
      - curl
    plugin: nil
    build-environment:
      - PATH: $CRAFT_STAGE/node/bin:$PATH
      - LD_LIBRARY_PATH: $CRAFT_STAGE/node/lib
    # NOTE: source see `Vagrantfile`
    override-build: |
      craftctl default
      set -eux
      case "$SNAP_ARCH" in
      "amd64")
        source="https://nodejs.org/download/release/latest-v20.x/node-v20.18.3-linux-x64.tar.gz"
        checksum="9fc3952da39b20d1fcfdb777b198cc035485afbbb1004b4df93f35245d61151e"
        arch="x64"
        ;;
      "arm64")
        source="https://nodejs.org/download/release/latest-v20.x/node-v20.18.3-linux-arm64.tar.gz"
        checksum="93a9df19238adfaa289f4784041d03edaf2fdd89fbb247faffca2fe4a1000703"
        arch="arm64"
        ;;
      *)
        echo "Unsupported architecture $SNAP_ARCH"
        exit 1
        ;;
      esac
      echo Download source
      curl $source -L -o $CRAFT_PART_SRC/source.tar.gz
      source_checksum=$(sha256sum $CRAFT_PART_SRC/source.tar.gz | cut -d " " -f 1)
      if [ "$source_checksum" != "$checksum" ]; then
        echo "$(tput setaf 1)Expected the digest for source to be $checksum, but it was $source_checksum$(tput sgr0)"
        exit 1
      fi
      echo Extract source
      tar -xzf $CRAFT_PART_SRC/source.tar.gz --directory $CRAFT_PART_INSTALL --strip-components=1
    organize:
      "*": node/
    stage:
      - -node/share
      - -node/CHANGELOG.md
      - -node/README.md
      - -node/lib/node_modules/npm/man

  ruby:
    after:
      - curl
      - libjemalloc2
    # NOTE: see `.ruby-version`
    source: https://cache.ruby-lang.org/pub/ruby/3.3/ruby-3.3.5.tar.gz
    source-checksum: sha256/3781a3504222c2f26cb4b9eb9c1a12dbf4944d366ce24a9ff8cf99ecbce75196
    plugin: autotools
    build-packages:
      - clang
      - autoconf
      - bison
      - libyaml-dev
      - libreadline-dev
      - zlib1g-dev
      - libncurses5-dev
      - libffi-dev
      - libdb-dev
      - libjemalloc-dev
    build-environment:
      - RUBY_VERSION: "3.3.5" # NOTE: must be updated with ruby source
      - RUBY_BRANCH: "3.3" # NOTE: must be updated with ruby source
      - DEBIAN_DISABLE_RUBYGEMS_INTEGRATION: "true"
      - CC: clang
      - CXX: clang++
    override-build: |
      set -eux
      ./configure \
        --prefix=/ \
        --with-jemalloc \
        --enable-shared \
        --disable-install-doc
      make -j"$(nproc)"
      make extract-gems
      make install DESTDIR=$CRAFT_PART_INSTALL/ruby
      case "$SNAP_ARCH" in
      "amd64")
        target="x86_64-linux"
        ;;
      "arm64")
        target="aarch64-linux"
        ;;
      *)
        echo "Unsupported architecture $SNAP_ARCH"
        exit 1
        ;;
      esac
      ln -sfn $target $CRAFT_PART_INSTALL/ruby/lib/ruby/$RUBY_BRANCH.0/$SNAP_ARCH
      ln -sfn libruby.so.$RUBY_VERSION $CRAFT_PART_INSTALL/ruby/lib/libruby.so
      ln -sfn libruby.so.$RUBY_VERSION $CRAFT_PART_INSTALL/ruby/lib/libruby.so.$RUBY_BRANCH
      cp -f $CRAFT_PART_SRC/LEGAL $CRAFT_PART_INSTALL/ruby/
    stage:
      - -ruby/share
      - -ruby/lib/pkgconfig
      - -ruby/lib/ruby/vendor_ruby
      - -ruby/lib/ruby/site_ruby
    override-stage: |
      craftctl default
      set -eux
      find $CRAFT_STAGE/ruby/bin -type f -execdir grep -Iq . {} \; -and -execdir sed -ie "s|^#!//bin/ruby$|#!${CRAFT_STAGE}/ruby/bin/ruby|" {} \;
    override-prime: |
      craftctl default
      set -eux
      find $CRAFT_PRIME/ruby/bin -type f -execdir grep -Iq . {} \; -and -execdir sed -ie "s|^#!${CRAFT_STAGE}/ruby/bin/ruby$|#!/snap/mastodon-server/current/ruby/bin/ruby|" {} \;
      for file in bundlee bundlere erbe geme irbe racce rakee rbse rdbge rdoce rie typeprofe; do
        rm $CRAFT_STAGE/ruby/bin/$file
      done

  libvips:
    # NOTE: https://github.com/libvips/libvips/releases/latest
    source: https://github.com/libvips/libvips/archive/refs/tags/v8.16.0.tar.gz
    source-checksum: sha256/d28d7bf7e3f8fa17390c255ace4a05a1c56459e1f6015319f4847ea0733593b3
    plugin: nil
    build-packages:
      - meson
      - ninja-build
      - clang
      - build-essential
      - pkg-config
      - libglib2.0-dev
      - libexpat1-dev
      - libcgif-dev
      - libexif-dev
      - libheif-dev
      - libimagequant-dev
      - libjpeg-turbo8-dev
      - liblcms2-dev
      - libspng-dev
      - libtiff-dev
      - libwebp-dev
      - libx265-dev
    stage-packages:
      - libcgif0
      - libexif12
      - libheif1
      - libimagequant0
      - libjpeg-turbo8
      - liblcms2-2
      - libspng0
      - libtiff6
      - libwebp7
      - libwebpdemux2
      - libwebpmux3
      - libx265-199
      - libheif-plugin-x265
    build-environment:
      - CC: clang
      - CXX: clang++
    override-build: |
      craftctl default
      set -eux
      meson setup build-dir \
        --prefix=$CRAFT_PART_INSTALL/libvips \
        --libdir=lib \
        --buildtype=release \
        -Ddeprecated=false \
        -Dexamples=false \
        -Dcplusplus=false \
        -Dintrospection=disabled
      cd build-dir
      ninja
      ninja test
      ninja install
      ln -sfn libvips.so $CRAFT_PART_INSTALL/libvips/lib/vips.so
      ln -sfn libvips.so.42 $CRAFT_PART_INSTALL/libvips/lib/vips.so.42
      cp -f $CRAFT_PART_SRC/LICENSE $CRAFT_PART_INSTALL/libvips/
    stage:
      - -libvips/share
      - -libvips/lib/pkgconfig

  ffmpeg:
    source: https://ffmpeg.org/releases/ffmpeg-7.1.tar.bz2 # NOTE: https://ffmpeg.org/releases
    source-checksum: sha256/fd59e6160476095082e94150ada5a6032d7dcc282fe38ce682a00c18e7820528
    plugin: autotools
    build-packages:
      - clang
      - build-essential
      - pkg-config
      - libsnappy-dev
      - liblzma-dev
      - libaom-dev
      - libmp3lame-dev
      - libopus-dev
      - libvorbis-dev
      - libvpx-dev
      - libx264-dev
      - libx265-dev
      - libwebp-dev
      - yasm
    stage-packages:
      - libsnappy1v5
      - libaom3
      - libmp3lame0
      - libopus0
      - libvorbis0a
      - libvorbisenc2
      - libvpx9
      - libx264-164
      - libx265-199
      - liblzma5
      - libwebp7
      - libvorbisenc2
      - yasm
    build-environment:
      - CC: clang
      - CXX: clang++
    override-build: |
      set -eux
      ./configure \
        --prefix=$CRAFT_PART_INSTALL/ffmpeg \
        --enable-gpl \
        --enable-version3 \
        --enable-ffmpeg \
        --enable-ffprobe \
        --enable-shared \
        --enable-libsnappy \
        --enable-libaom \
        --enable-libmp3lame \
        --enable-libopus \
        --enable-libvorbis \
        --enable-libvpx \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libwebp \
        --disable-ffplay \
        --disable-network \
        --disable-static \
        --disable-devices \
        --disable-doc \
        --disable-debug
      make -j"$(nproc)"
      make install
      cp -f $CRAFT_PART_SRC/COPYING.LGPLv3 $CRAFT_PART_INSTALL/ffmpeg/
    stage:
      - -ffmpeg/share
      - -ffmpeg/lib/pkgconfig

  mastodon:
    after:
      - mastodon-customizations
      - envsubst
      - ruby
      - node
      - postgres
      - musl-libc
      - libjemalloc2
      - libvips
      - ffmpeg
      - rsync
    # NOTE: https://github.com/mastodon/mastodon/releases/latest
    source: https://github.com/mastodon/mastodon/archive/refs/tags/v4.3.3.tar.gz
    source-checksum: sha256/d8c68d2bce5826fa4fbb52b598ad8a95354baaf517cb972eeb4e8600d94de33b
    plugin: nil
    build-packages:
      - git
      - build-essential
      - libidn-dev
      - libxml2-dev
      - libxslt1-dev
      - libssl-dev
      - musl-dev
      - libjemalloc-dev
    stage-packages:
      - file
      - libidn12
      - libmagic-mgc
      - libssl3t64
    build-environment:
      - YARN_VERSION: "4.6.0" # NOTE: https://github.com/yarnpkg/berry/releases/latest
      - RUBY_BRANCH: "3.3" # NOTE: must be updated with ruby source
      - BUNDLER_VERSION: "2.5.18" # NOTE: see `Gemfile.lock`
      - RAILS_ENV: production
      - NODE_ENV: production
      - OTP_SECRET: precompile_placeholder
      - SECRET_KEY_BASE: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: precompile_placeholder
      - PATH: $CRAFT_STAGE/ruby/bin:$CRAFT_STAGE/node/bin:$CRAFT_STAGE/libvips/bin:$PATH
      - LD_LIBRARY_PATH: $CRAFT_STAGE/ruby/lib:$CRAFT_STAGE/node/lib:$CRAFT_STAGE/libvips/lib
      - RUBYLIB: $CRAFT_STAGE/ruby/lib/ruby/$RUBY_BRANCH.0:$CRAFT_STAGE/ruby/lib/ruby/$RUBY_BRANCH.0/$SNAP_ARCH
      - BUNDLE_PATH: $CRAFT_PART_BUILD/vendor/bundle
      - BUNDLE_GEMFILE: $CRAFT_PART_BUILD/Gemfile
      - BUNDLE_RAKEFILE: $CRAFT_PART_BUILD/Rakefile
      - GEM_HOME: $CRAFT_PART_BUILD/vendor/ruby
      - GEM_PATH: $GEM_HOME
      - YARN_RC_FILENAME: $CRAFT_PART_BUILD/.yarnrc.yml
      - YARN_CACHE_FOLDER: /tmp/yarn
      - COREPACK_HOME: /tmp/corepack
      - MASTODON_USE_LIBVIPS: "true"
      - MASTODON_STATUS_LENGTH: 1000
      # NOTE: workaround for current issue (see https://github.com/mastodon/mastodon/releases/tag/v4.3.0-beta.1)
      - BUNDLE_BUILD__CHARLOCK_HOLMES: "--with-cxxflags=-std=c++17"
    # NOTE: fiddle is no longer included in ruby 3.5.0
    override-build: |
      set -eux
      gem install bundler -v $BUNDLER_VERSION --no-document --install-dir $GEM_PATH
      bundle config deployment "true"
      bundle config without "development test"
      bundle config set --local path $BUNDLE_PATH
      bundle config set --local silence_root_warning true
      bundle config build.pg --with-pg-config=$CRAFT_STAGE/postgres/bin/pg_config
      bundle config set frozen false
      echo "gem 'fiddle', '~> 1.1.2'" >> Gemfile
      bundle install -j"$(nproc)"
      bundle config set frozen true

      mkdir -p $COREPACK_HOME $YARN_CACHE_FOLDER
      corepack enable
      corepack prepare --activate
      corepack yarn set version $YARN_VERSION
      corepack yarn install --immutable
      npx update-browserslist-db@latest
      yarn cache clean
      npm cache clean --force

      sed -ri "s/length\(fulltext\) > maxChars/length(fulltext) > $MASTODON_STATUS_LENGTH/" app/javascript/mastodon/features/compose/components/compose_form.jsx
      sed -ri "s/CharacterCounter max=\{maxChars\}/CharacterCounter max={$MASTODON_STATUS_LENGTH}/" app/javascript/mastodon/features/compose/components/compose_form.jsx
      sed -ri "s/MAX_CHARS = 500/MAX_CHARS = $MASTODON_STATUS_LENGTH/" app/validators/status_length_validator.rb
      cp -rf $CRAFT_PART_BUILD $CRAFT_PART_INSTALL/mastodon
    stage:
      - -mastodon/dist
      - -mastodon/chart
      - -mastodon/log
      - -mastodon/*.md
      - -mastodon/Vagrantfile
      - -mastodon/Dockerfile
      - -mastodon/streaming/Dockerfile
      - -mastodon/docker-compose.yml
      - -mastodon/.env.*
      - -mastodon/.devcontainer
      - -mastodon/.husky
      - -mastodon/.buildpacks
      - -mastodon/.editorconfig
      - -mastodon/.foreman
      - -mastodon/.gitattributes
      - -mastodon/.gitignore
      - -mastodon/.dockerignore
      - -mastodon/.nanoignore
      - -mastodon/.slugignore
      - -mastodon/.prettierignore
      - -mastodon/.prettierrc.js
      - -mastodon/.rubocop*
      - -mastodon/stylelint.config.js
      - -mastodon/.*lint*
      - -mastodon/Aptfile
      - -mastodon/node_modules/*/prebuilds/win32-*
    override-prime: |
      craftctl default
      set -eux
      rm -rf $CRAFT_STAGE/mastodon/tmp
      rm -rf $CRAFT_STAGE/mastodon/node_modules/.cache
      LD_LIBRARY_PATH=$CRAFT_STAGE/lib \
        rsync -ac $CRAFT_STAGE/mastodon $CRAFT_PRIME

  mastodon-customizations:
    plugin: dump
    source: src/mastodon/
    organize:
      config/*: config/mastodon/

  mastodon-addons:
    after:
      - mastodon
    plugin: nil
    build-environment:
      - MASTODON_JS: $CRAFT_STAGE/mastodon/app/javascript
    override-build: |
      set -eux
      mkdir -p $MASTODON_JS/mastodon/addons
      cp $CRAFT_STAGE/addons/*.js $MASTODON_JS/mastodon/addons/
      for name in snow fediday; do
        sed -i "1s|^|import * as $name from 'mastodon/addons/$name';\n|" $MASTODON_JS/mastodon/common.js
      done

  bird-ui:
    after:
      - curl
      - mastodon
    plugin: nil
    build-environment:
      - BIRD_UI_TAG: 2.1.1 # NOTE: https://github.com/ronilaukkarinen/mastodon-bird-ui/releases/latest
      - MASTODON_STYLES: $CRAFT_STAGE/mastodon/app/javascript/styles
    override-build: |
      set -eux
      mkdir -p $MASTODON_STYLES/mastodon-bird-ui

      curl https://raw.githubusercontent.com/ronilaukkarinen/mastodon-bird-ui/$BIRD_UI_TAG/LICENSE -o $MASTODON_STYLES/mastodon-bird-ui/LICENSE
      curl https://raw.githubusercontent.com/ronilaukkarinen/mastodon-bird-ui/$BIRD_UI_TAG/layout-single-column.css -o $MASTODON_STYLES/mastodon-bird-ui/layout-single-column.scss
      sed -i "s/theme-contrast/theme-mastodon-bird-ui-contrast/g" $MASTODON_STYLES/mastodon-bird-ui/layout-single-column.scss
      sed -i "s/theme-mastodon-light/theme-mastodon-bird-ui-light/g" $MASTODON_STYLES/mastodon-bird-ui/layout-single-column.scss
      curl https://raw.githubusercontent.com/ronilaukkarinen/mastodon-bird-ui/$BIRD_UI_TAG/layout-multiple-columns.css -o $MASTODON_STYLES/mastodon-bird-ui/layout-multiple-columns.scss
      sed -i "s/theme-contrast/theme-mastodon-bird-ui-contrast/g" $MASTODON_STYLES/mastodon-bird-ui/layout-multiple-columns.scss
      sed -i "s/theme-mastodon-light/theme-mastodon-bird-ui-light/g" $MASTODON_STYLES/mastodon-bird-ui/layout-multiple-columns.scss
      echo -e "@import 'application';\n@import 'mastodon-bird-ui/layout-single-column.scss';\n@import 'mastodon-bird-ui/layout-multiple-columns.scss';" > $MASTODON_STYLES/mastodon-bird-ui-dark.scss
      echo -e "mastodon-bird-ui-dark: styles/mastodon-bird-ui-dark.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml
      echo -e "@import 'mastodon-light/variables';\n@import 'application';\n@import 'mastodon-light/diff';\n@import 'mastodon-bird-ui/layout-single-column.scss';\n@import 'mastodon-bird-ui/layout-multiple-columns.scss';" > $MASTODON_STYLES/mastodon-bird-ui-light.scss
      echo -e "mastodon-bird-ui-light: styles/mastodon-bird-ui-light.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml
      echo -e "@import 'contrast/variables';\n@import 'application';\n@import 'contrast/diff';\n@import 'mastodon-bird-ui/layout-single-column.scss';\n@import 'mastodon-bird-ui/layout-multiple-columns.scss';" > $MASTODON_STYLES/mastodon-bird-ui-contrast.scss
      echo -e "mastodon-bird-ui-contrast: styles/mastodon-bird-ui-contrast.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml
      cat $MASTODON_STYLES/mastodon-bird-ui-contrast.scss $CRAFT_STAGE/themes/mastodon-bird-ui/accessible.scss > $MASTODON_STYLES/mastodon-bird-ui-accessible.scss
      echo -e "mastodon-bird-ui-accessible: styles/mastodon-bird-ui-accessible.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml

      for locale in $CRAFT_STAGE/mastodon/config/locales/*.yml; do
        sed -i "s/default: Mastodon (\(.*\))/&\n    mastodon-bird-ui-dark: Mastodon Bird UI (\1)/" $locale
        sed -i "s/mastodon-light: Mastodon (\(.*\))/&\n    mastodon-bird-ui-light: Mastodon Bird UI (\1)/" $locale
        sed -i "s/contrast: Mastodon (\(.*\))/&\n    mastodon-bird-ui-contrast: Mastodon Bird UI (\1)\n    mastodon-bird-ui-accessible: Mastodon Bird UI (\1++) ♿/" $locale
      done

  tangerine-ui:
    after:
      - curl
      - mastodon
    plugin: nil
    build-environment:
      - TANGERINE_UI_TAG: 2.3 # NOTE: https://github.com/nileane/TangerineUI-for-Mastodon/releases/latest
      - MASTODON_STYLES: $CRAFT_STAGE/mastodon/app/javascript/styles
    override-build: |
      set -eux
      mkdir -p $MASTODON_STYLES/tangerine-ui

      curl https://raw.githubusercontent.com/nileane/TangerineUI-for-Mastodon/v$TANGERINE_UI_TAG/LICENSE -o $MASTODON_STYLES/tangerine-ui/LICENSE
      curl https://raw.githubusercontent.com/nileane/TangerineUI-for-Mastodon/v$TANGERINE_UI_TAG/mastodon/app/javascript/styles/tangerineui/tangerineui.scss -o $MASTODON_STYLES/tangerine-ui/style.scss
      echo -e "@import 'application';\n@import 'tangerine-ui/style.scss';" > $MASTODON_STYLES/tangerine-ui.scss
      echo -e "tangerine-ui: styles/tangerine-ui.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml
      for variant in purple cherry lagoon; do
        curl https://raw.githubusercontent.com/nileane/TangerineUI-for-Mastodon/v$TANGERINE_UI_TAG/mastodon/app/javascript/styles/tangerineui-$variant/tangerineui-$variant.scss -o $MASTODON_STYLES/tangerine-ui/style-$variant.scss
        echo -e "@import 'application';\n@import 'tangerine-ui/style-$variant.scss';" > $MASTODON_STYLES/tangerine-ui-$variant.scss
        echo -e "tangerine-ui-$variant: styles/tangerine-ui-$variant.scss" >> $CRAFT_STAGE/mastodon/config/themes.yml
      done

      for locale in $CRAFT_STAGE/mastodon/config/locales/*.yml; do
        sed -i "s/themes:$/&\n    tangerine-ui: Tangerine UI 🍊 Tangerine/" $locale
        sed -i "s/themes:$/&\n    tangerine-ui-purple: Tangerine UI 🪻 Purple/" $locale
        sed -i "s/themes:$/&\n    tangerine-ui-cherry: Tangerine UI 🍒 Cherry/" $locale
        sed -i "s/themes:$/&\n    tangerine-ui-lagoon: Tangerine UI 🐠 Lagoon/" $locale
      done

  mastodon-precompile:
    after:
      - mastodon
      - mastodon-addons
      - bird-ui
      - tangerine-ui
    plugin: nil
    build-environment:
      - RUBY_BRANCH: "3.3" # NOTE: must be updated with ruby source
      - RUBYLIB: $CRAFT_STAGE/ruby/lib/ruby/$RUBY_BRANCH.0:$CRAFT_STAGE/ruby/lib/ruby/$RUBY_BRANCH.0/$SNAP_ARCH
      - PATH: $CRAFT_STAGE/mastodon/bin:$CRAFT_STAGE/ruby/bin:$CRAFT_STAGE/node/bin:$PATH
      - LD_LIBRARY_PATH: $CRAFT_STAGE/mastodon/lib:$CRAFT_STAGE/ruby/lib:$CRAFT_STAGE/node/lib
      - RAILS_ENV: production
      - NODE_ENV: production
      - BUNDLE_PATH: $CRAFT_STAGE/mastodon/vendor/bundle
      - BUNDLE_GEMFILE: $CRAFT_STAGE/mastodon/Gemfile
      - BUNDLE_RAKEFILE: $CRAFT_STAGE/mastodon/Rakefile
      - GEM_HOME: $CRAFT_STAGE/mastodon/vendor/ruby
      - GEM_PATH: $GEM_HOME
      - YARN_RC_FILENAME: $CRAFT_STAGE/mastodon/.yarnrc.yml
      - YARN_CACHE_FOLDER: /tmp/yarn
      - COREPACK_HOME: /tmp/corepack
      - OTP_SECRET: precompile_placeholder
      - SECRET_KEY_BASE: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: precompile_placeholder
      - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: precompile_placeholder
    override-build: |
      set -eux
      cd $CRAFT_STAGE/mastodon
      bundle exec rails assets:precompile --trace
      bundle exec rails log:clear tmp:clear

  cleanup:
    after:
      - logrotate
      - postgres
      - nginx
      - redis
      - acme
      - node
      - ruby
      - mastodon
    plugin: nil
    override-prime: |
      set -eux
      mv -f $CRAFT_PRIME/usr/bin/* $CRAFT_PRIME/bin/
      mv -f $CRAFT_PRIME/usr/lib/* $CRAFT_PRIME/lib/
      mv -f $CRAFT_PRIME/lib/*-linux-gnu/* $CRAFT_PRIME/lib/
      rm -rf $CRAFT_PRIME/usr/share/bug
      rm -rf $CRAFT_PRIME/usr/share/lintian
      rm -rf $CRAFT_PRIME/usr/share/man
      rm -rf $CRAFT_PRIME/usr/include
      find $CRAFT_PRIME -type d -name include -prune -print -execdir rm -rf {} \;
      find $CRAFT_PRIME/usr/share/doc -type f -not -name "copyright" -execdir rm -f {} \;
      mv -f $CRAFT_PRIME/usr/share/doc $CRAFT_PRIME/doc
      find $CRAFT_PRIME -type f -name "README.md" -execdir rm -f {} \;
      find $CRAFT_PRIME -xtype l -print -exec rm {} \;
      find $CRAFT_PRIME -type d -empty -depth -print -execdir rmdir {} \;
