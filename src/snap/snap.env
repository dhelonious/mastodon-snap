#!/bin/bash

export SNAP_CURRENT="$(dirname $SNAP_DATA)/current"

export PID_DIR=/tmp/pids
export SOCK_DIR=/tmp/sockets
export LOG_DIR="$SNAP_DATA/logs"
export CERT_DIR="$SNAP_COMMON/certs"
export SECRET_DIR="$SNAP_COMMON/secrets"
export UPDATE_DIR="$SNAP_COMMON/update"
export UPDATE_BACKUP_DIR="$UPDATE_DIR/backups"

export DOMAIN="$(snapctl get domain)"
export EMAIL="$(snapctl get email)"

export DEFAULT_MEDIA_DIR="$SNAP_COMMON/media"
export DEFAULT_BACKUP_DIR="$SNAP_COMMON/backups"

export XDG_CONFIG_HOME="$SNAP_DATA"

export SETTINGS=$(cat <<-END
domain,
email,
ports.http,80
ports.https,443
acme.server,letsencrypt
update.backups,true
status.char-limit,500
status.char-counter,500
media.dir,"$DEFAULT_MEDIA_DIR"
backup.dir,"$DEFAULT_BACKUP_DIR"
backup.days,0
cleanup.days,7
cleanup.media,true
cleanup.previews,true
cleanup.statuses,true
cleanup.orphans,false
log.access.enabled,false
log.access.format,anonymized
END
)

mkdir_with_owner() {
    if ! [ -d "$2" ]; then
        echo Create "$2" with owner "$1"
        mkdir -p "$2"
        chown $1 "$2"
    fi
}

mkdir_with_permissions() {
    if ! [ -d "$3" ]; then
        echo Create "$3" with owner "$1" and permissions "$2"
        mkdir -p "$3"
        chmod $2 "$3"
        chown $1 "$3"
    fi
}

mkdir_with_permissions root:root 777 "$PID_DIR"
mkdir_with_permissions root:root 777 "$SOCK_DIR"

# TODO: From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
run_as_daemon_user() {
    setpriv --clear-groups --reuid snap_daemon --regid snap_daemon -- "$@"
}

echo_error() {
    echo "$@" 1>&2
}

check_root() {
    if [ $(id -u) -ne 0 ]; then
        echo_error "This command must be run as root"
        exit 0
    fi
}

regex_match() {
    if echo "$2" | grep -qE "$1"; then
        return 0
    else
        return 1
    fi
}

is_number() {
    if regex_match '^[0-9]+$' "$1"; then
        return 0
    else
        return 1
    fi
}

snapctl_set_default() {
    if [ -z "$(snapctl get $1)" ]; then
        snapctl set $1=$2
        echo "$1 set to $2"
    fi
}

set_default_settings() {
    for setting in $SETTINGS; do
        snapctl_set_default ${setting%,*} ${setting#*,}
    done
}

update_paths() {
    local path="${2:-$SNAP}"
    export PATH="$path/$1/bin:$PATH"
    export LD_LIBRARY_PATH="$path/$1/lib:$LD_LIBRARY_PATH"
}

config_dir() {
    echo "$SNAP_DATA/$1/config"
}

copy_envsubst() {
    envsubst "$(env | cut -d= -f1 | sed -e 's/^/$/')" < $1 > $2
}

copy_config() {
    local local_config_dir="$(config_dir $1)"
    echo "Copy $2 to $local_config_dir"
    mkdir -p "$(dirname $local_config_dir/$2)"
    copy_envsubst "$SNAP/config/$1/$2" "$local_config_dir/$2"
}

config_exists() {
    local local_config_dir="$(config_dir $1)"
    if [ -f "$(config_dir $1)/$2" ]; then
        return 0
    else
        return 1
    fi
}

remove_config() {
    rm -f "$SNAP_DATA/$1/config/$2"
}

get_snap_version_file() {
    cat "$SNAP_COMMON/version"
}

update_snap_version_file() {
    echo "$SNAP_VERSION" > "$SNAP_COMMON/version"
}

secret_exists() {
    if [ -f "$SECRET_DIR/$1" ]; then
        return 0
    else
        return 1
    fi
}

get_secret() {
    if $(secret_exists $1); then
        cat "$SECRET_DIR/$1"
    else
        echo_error "Password for $1 has not yet been generated"
    fi
}

set_secret() {
    echo "$2" > "$SECRET_DIR/$1"
    chmod 600 "$SECRET_DIR/$1"
}

generate_secret() {
    if $(secret_exists $1); then
        echo_error "Password for $1 has already been generated"
        local secret=$(get_secret "$1")
    else
        local secret="$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c64)"
        set_secret "$1" "$secret"
    fi

    echo $secret
}

is_domain() {
    if regex_match '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return 0
    else
        return 1
    fi
}

check_domain() {
    while ! is_domain "$DOMAIN"; do
        echo "Enter a valid domain:"
        read DOMAIN

        snapctl set domain=$DOMAIN
        export DOMAIN="$DOMAIN"
    done
}

is_email() {
    if regex_match '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return 0
    else
        return 1
    fi
}

check_email() {
    while ! is_email "$EMAIL"; do
        echo "Enter a valid e-mail address:"
        read EMAIL

        snapctl set email=$EMAIL
        export EMAIL="$EMAIL"
    done
}

restart_required() {
    snapctl set restart-required.$1=true
}

reset_restart_required() {
    snapctl set restart-required.$1=false
}

restart_service_if_required() {
    if [ "$(snapctl get restart-required.$1)" == true ]; then
        echo Restart $1
        snapctl restart "$SNAP_NAME.$1"
        reset_restart_required $1
    fi
}

confirm() {
    read -r -p "$1 [y/N] " response
    case "$response" in
        [yY])
            true;;
        *)
            false;;
    esac
}
