#!/bin/bash

# TODO: From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
export DAEMON_USER=snap_daemon
export SNAP_CURRENT="$(dirname $SNAP_DATA)/current"

export HOME="$SNAP_DATA"
export XDG_CONFIG_HOME="$SNAP_DATA"

export KB=1024
export MB=$((1024 * $KB))
export GB=$((1024 * $MB))

export PID_DIR=/tmp/pids
export SOCK_DIR=/tmp/sockets
export LOG_DIR="$SNAP_DATA/logs"
export CERT_DIR="$SNAP_COMMON/certs"
export SECRET_DIR="$SNAP_COMMON/secrets"
export UPDATE_DIR="$SNAP_COMMON/update"
export UPDATE_BACKUP_DIR="$UPDATE_DIR/backups"

export DOMAIN="$(snapctl get domain)"
export EMAIL="$(snapctl get email)"

export SYSTEM_CPU="$(snapctl get system.cpu)"
export SYSTEM_RAM="$(snapctl get system.ram)"
export SYSTEM_SSD="$(snapctl get system.ssd)"

export DEFAULT_MEDIA_DIR="$SNAP_COMMON/media"
export DEFAULT_BACKUP_DIR="$SNAP_COMMON/backups"

export SETTINGS=$(cat <<-END
domain,
email,
ports.http,80
ports.https,443
acme.server,letsencrypt
update.backups,true
status.char-limit,500
status.char-counter,500
media.dir,"$DEFAULT_MEDIA_DIR"
backup.dir,"$DEFAULT_BACKUP_DIR"
backup.days,0
cleanup.days,3
cleanup.media,true
cleanup.headers,true
cleanup.previews,true
cleanup.statuses,true
cleanup.orphans,false
cleanup.accounts,false
log.access.enabled,false
log.access.format,anonymized
system.cpus,auto
system.ram,auto
system.ssd,true
END
)

get_total_cpus() {
    local cpus=$(getconf _NPROCESSORS_ONLN)
    if is_number "$cpus"; then
        echo $cpus
    else
        echo 2
    fi
}

get_total_ram() {
    local physPages=$(getconf _PHYS_PAGES)
    local pageSize=$(getconf PAGE_SIZE)
    if is_number "$physPages" && is_number "$pageSize"; then
        echo $((physPages * pageSize))
    else
        echo $((2 * GB))
    fi
}

if [ "$SYSTEM_CPU" == "auto" ]; then
    export SYSTEM_CPU=$(get_total_cpus)
fi
if [ "$SYSTEM_RAM" == "auto" ]; then
    export SYSTEM_RAM=$(get_total_ram)
fi

major_version() {
    echo "$1" | cut -d "." -f1
}

minor_version() {
    echo "$1" | cut -d "." -f1-2
}

get_owner() {
    ls -ld "$1" 2> /dev/null || run_as_daemon_user ls -ld "$1" 2> /dev/null | cut -d " " -f 3
}

mkdir_for_daemon_user() {
    for dir in "$@"; do
        if ! [ -d "$dir" ]; then
            echo "Create $dir with owner $DAEMON_USER:root"
            mkdir -pm 0775 "$dir"
            chown $DAEMON_USER:root "$dir"
        fi
    done
}

fix_daemon_user() {
    if [ -e "$1" ]; then
        chmod -fR g+rw "$1" || run_as_daemon_user chmod -fR g+rw "$1" || true
        chown -fR $DAEMON_USER:root --no-dereference "$1" || true
    fi
}

echo_error() {
    echo "$@" 1>&2
}

echo_border() {
    local text="$2"
    local text_length=${#text}
    local border=$(printf "$1%.0s" $(seq 1 $((text_length + 4))))

    echo "$border"
    echo "$1 $text $1"
    echo "$border"
}

echo_underline() {
    local text="$2"
    local text_length=${#text}
    local underline=$(printf "$1%.0s" $(seq 1 $((text_length))))

    echo "$text"
    echo "$underline"
}

check_root() {
    if [ $(id -u) -ne 0 ]; then
        echo_error "This command must be run as root"
        exit 0
    fi
}

is_active() {
    if snapctl services "$SNAP_NAME.$1" | grep -q "inactive"; then
        return 1
    else
        return 0
    fi
}

check_service() {
    if ! is_active "$1"; then
        echo_error "$1 is not running."
        exit 0
    fi
}

regex_match() {
    if echo "$2" | grep -qE "$1"; then
        return 0
    else
        return 1
    fi
}

is_number() {
    if regex_match '^[0-9]+$' "$1"; then
        return 0
    else
        return 1
    fi
}

is_boolean() {
    if regex_match '^\(true|false\)$' "$1"; then
        return 0
    else
        return 1
    fi
}

snapctl_set_default() {
    if [ -z "$(snapctl get $1)" ]; then
        snapctl set $1=$2
        echo "$1 set to $2"
    fi
}

set_default_settings() {
    for setting in $SETTINGS; do
        snapctl_set_default ${setting%,*} ${setting#*,}
    done
}

update_paths() {
    local path="${2:-$SNAP}"
    export PATH="$path/$1/bin:$PATH"
    export LD_LIBRARY_PATH="$path/$1/lib:$LD_LIBRARY_PATH"
}

config_dir() {
    echo "$SNAP_DATA/$1/config"
}


get_env_vars() {
    env | sed -rn "s/^([A-Z0-9_]+)=.*$/$\1/p"
}

copy_config() {
    local local_config_dir="$(config_dir $1)"
    echo "Copy $2 to $local_config_dir"
    mkdir -p "$(dirname $local_config_dir/$2)"
    envsubst_file "$(cat $SNAP/config/$1/$2)" "$local_config_dir/$2"
    if debug_file_exists; then
        cat "$local_config_dir/$2"
    fi
}

copy_config_as_daemon_user() {
    local local_config_dir=$(config_dir $1)
    echo "Copy $2 to $local_config_dir"
    run_as_daemon_user mkdir -p "$(dirname $local_config_dir/$2)"
    run_as_daemon_user envsubst_file "$(cat $SNAP/config/$1/$2)" "$local_config_dir/$2"
    if debug_file_exists; then
        cat "$local_config_dir/$2"
    fi
}

config_exists() {
    local local_config_dir="$(config_dir $1)"
    if [ -f "$(config_dir $1)/$2" ]; then
        return 0
    else
        return 1
    fi
}

remove_config() {
    rm -f "$SNAP_DATA/$1/config/$2"
}

remove_config_as_daemon_user() {
    run_as_daemon_user rm -f "$SNAP_DATA/$1/config/$2"
}

get_snap_version_file() {
    cat "$SNAP_COMMON/version"
}

update_snap_version_file() {
    echo "$SNAP_VERSION" > "$SNAP_COMMON/version"
}

secret_exists() {
    if [ -f "$SECRET_DIR/$1" ]; then
        return 0
    else
        return 1
    fi
}

get_secret() {
    if $(secret_exists $1); then
        cat "$SECRET_DIR/$1"
    else
        echo_error "Password for $1 has not yet been generated"
    fi
}

set_secret() {
    echo "$2" > "$SECRET_DIR/$1"
    chmod 640 "$SECRET_DIR/$1"
    chown root:$DAEMON_USER "$SECRET_DIR/$1"
}

generate_secret() {
    if $(secret_exists $1); then
        echo_error "Password for $1 has already been generated"
        local secret=$(get_secret "$1")
    else
        local secret="$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c64)"
        set_secret "$1" "$secret"
    fi

    echo $secret
}

is_domain() {
    if regex_match '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return 0
    else
        return 1
    fi
}

check_domain() {
    while ! is_domain "$DOMAIN"; do
        read -p "Enter a valid domain: " DOMAIN
        snapctl set domain=$DOMAIN
        export DOMAIN="$DOMAIN"
    done
}

is_email() {
    if regex_match '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return 0
    else
        return 1
    fi
}

check_email() {
    while ! is_email "$EMAIL"; do
        read -p "Enter a valid e-mail address: " EMAIL
        snapctl set email=$EMAIL
        export EMAIL="$EMAIL"
    done
}

check_removable_media() {
    if ! snapctl is-connected removable-media; then
        echo_error "The removable-media plug is not connected;"
        echo_error "Use 'snap connect $SNAP_NAME:removable-media' to enable it"
        exit 0
    fi
}

restart_required() {
    snapctl set system.restart-required.$1=true
}

reset_restart_required() {
    snapctl set system.restart-required.$1=false
}

restart_service_if_required() {
    if [ "$(snapctl get system.restart-required.$1)" == true ]; then
        echo Restart $1
        snapctl restart "$SNAP_NAME.$1"
        reset_restart_required $1
    fi
}

confirm() {
    read -rp "$1 [y/N] " response
    case "$response" in
        [yY])
            true;;
        *)
            false;;
    esac
}

rsync_clean() {
    rsync --no-perms --no-owner --no-group "$1" "$2" && \
        cd /tmp && find "$2" -path "*/$(basename $1)" \( \
            -type d -execdir chmod 755 "{}" \; -o \
            -type f -execdir chmod 644 "{}" \; \
        \)
}

binary_round() {
    value=$1
    multiplier=1
    while [ $value -gt 16 ]; do
        value=$((value / 2))
        multiplier=$((multiplier * 2))
    done
    echo $((multiplier * value))
}

file_size_unit() {
    local value=$(($(binary_round $1)))
    local unit=""

    if [ $value -ge 10240 ]; then
        unit="kB"
        value=$((value / 1024))
    fi
    if [ $value -ge 10240 ]; then
        unit="MB"
        value=$((value / 1024))
    fi
    if [ $value -ge 10240 ]; then
        unit="GB"
        value=$((value / 1024))
    fi

    echo "$value$unit"
}

check_system_cpu() {
    if [ "$SYSTEM_CPU" == "auto" ]; then
        local total_cpus = $(get_total_cpus)
        export SYSTEM_CPU="${total_cpus:-2}"
    fi

    while ! is_number "$SYSTEM_CPU"; do
        read -p "Enter the number of CPU cores available: " -ei "$SYSTEM_CPU" SYSTEM_CPU
    done

    snapctl set system.cpu=$SYSTEM_CPU
    export SYSTEM_CPU="$SYSTEM_CPU"
}

check_system_ram() {
    if [ "$SYSTEM_RAM" == "auto" ]; then
        local total_ram = $(get_total_ram)
        export SYSTEM_RAM="${total_ram:-2}"
    fi

    while ! is_number "$SYSTEM_RAM"; do
        read -p "Enter the amount of RAM available in GB: " -ei "$SYSTEM_RAM" SYSTEM_RAM
    done

    snapctl set system.ram=$SYSTEM_RAM
    export SYSTEM_RAM="$SYSTEM_RAM"
}

check_system_ssd() {
    if ! is_boolean "$SYSTEM_SSD"; then
        if confirm "Is $SNAP_NAME installed on an SSD?"; then
            export SYSTEM_SSD=true
        else
            export SYSTEM_SSD=false
        fi
    fi

    snapctl set system.ssd=$SYSTEM_SSD
}

enable_debug_mode() {
    exec >> "$SNAP_USER_COMMON/${1:-debug}.log" 2>&1
    set -x
}

disable_debug_mode() {
    set +x
    exec 1>&2-
    exec 2>&2-
    exec 1>&1
    exec 2>&2
}

debug_file_exists() {
    if [ -f "$SNAP_USER_COMMON/debug" ]; then
        return 1
    else
        return 0
    fi
}
