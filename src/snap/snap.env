#!/bin/bash

# TODO: From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
export DAEMON_USER=snap_daemon
export SNAP_CURRENT="$(dirname $SNAP_DATA)/current"

export HOME="$SNAP_DATA"
export XDG_CONFIG_HOME="$SNAP_DATA"

export PID_DIR=/tmp/pids
export SOCK_DIR=/tmp/sockets
export LOG_DIR="$SNAP_DATA/logs"
export CERT_DIR="$SNAP_COMMON/certs"
export SECRET_DIR="$SNAP_COMMON/secrets"
export UPDATE_DIR="$SNAP_COMMON/update"
export UPDATE_BACKUP_DIR="$UPDATE_DIR/backups"

export DOMAIN="$(snapctl get domain)"
export EMAIL="$(snapctl get email)"

export DEFAULT_MEDIA_DIR="$SNAP_COMMON/media"
export DEFAULT_BACKUP_DIR="$SNAP_COMMON/backups"

export SETTINGS=$(cat <<-END
domain,
email,
ports.http,80
ports.https,443
acme.server,letsencrypt
update.backup,true
update.announcement,true
status.length,1000
media.dir,"$DEFAULT_MEDIA_DIR"
backup.dir,"$DEFAULT_BACKUP_DIR"
backup.days,0
cleanup.days,3
cleanup.media,true
cleanup.headers,true
cleanup.previews,true
cleanup.statuses,true
cleanup.orphans,false
cleanup.accounts,false
log.access.enabled,false
log.access.format,network
END
)

major_version() {
    echo "$1" | cut -d "." -f1
}

minor_version() {
    echo "$1" | cut -d "." -f1-2
}

get_owner() {
    ls -ld "$1" 2> /dev/null || run_as_daemon_user ls -ld "$1" 2> /dev/null | cut -d " " -f 3
}

mkdir_for_daemon_user() {
    for dir in "$@"; do
        if ! [ -d "$dir" ]; then
            echo "Create $dir with owner $DAEMON_USER:root"
            mkdir -pm 0775 "$dir"
            chown $DAEMON_USER:root "$dir"
        fi
    done
}

mkdir_pid() {
    mkdir -pm 0777 "$PID_DIR"
}

mkdir_sock() {
    mkdir -pm 0777 "$SOCK_DIR"
}

fix_daemon_user() {
    if [ -e "$1" ]; then
        chmod -fR g+rw "$1" || run_as_daemon_user chmod -fR g+rw "$1" || true
        chown -fR $DAEMON_USER:root --no-dereference "$1" || true
    fi
}

echo_error() {
    echo "$@" 1>&2
}

confirm() {
    read -rp "$1 [y/N] " response
    case "$response" in
        [yY])
            return true;;
        *)
            return false;;
    esac
}

check_root() {
    if [ $(id -u) -ne 0 ]; then
        echo_error "This command must be run as root"
        exit 0
    fi
}

is_active() {
    if snapctl services "$SNAP_NAME.$1" | grep -q "inactive"; then
        return false
    else
        return true
    fi
}

check_service() {
    if ! is_active "$1"; then
        echo_error "$1 is not running."
        exit 0
    fi
}

regex_match() {
    if echo "$2" | grep -qE "$1"; then
        return true
    else
        return false
    fi
}

is_number() {
    if regex_match '^[0-9]+$' "$1"; then
        return true
    else
        return false
    fi
}

is_boolean() {
    if regex_match '^(true|false|yes|no|0|1)$' "$1"; then
        return true
    else
        return false
    fi
}

snapctl_set_default() {
    if [ -z "$(snapctl get $1)" ]; then
        snapctl set $1=$2
        echo "$1 set to $2"
    fi
}

set_default_settings() {
    for setting in $SETTINGS; do
        snapctl_set_default ${setting%,*} ${setting#*,}
    done
}

update_paths() {
    local path="${2:-$SNAP}"
    export PATH="$path/$1/bin:$PATH"
    export LD_LIBRARY_PATH="$path/$1/lib:$LD_LIBRARY_PATH"
}

config_dir() {
    echo "$SNAP_DATA/$1/config"
}


get_env_vars() {
    env | sed -rn "s/^([A-Z0-9_]+)=.*$/$\1/p"
}

copy_config() {
    local local_config_dir="$(config_dir $1)"
    echo "Copy $2 to $local_config_dir"
    mkdir -p "$(dirname $local_config_dir/$2)"
    envsubst_file "$(cat $SNAP/config/$1/$2)" "$local_config_dir/$2"
}

copy_config_as_daemon_user() {
    local local_config_dir=$(config_dir $1)
    echo "Copy $2 to $local_config_dir"
    run_as_daemon_user mkdir -p "$(dirname $local_config_dir/$2)"
    run_as_daemon_user envsubst_file "$(cat $SNAP/config/$1/$2)" "$local_config_dir/$2"
}

config_exists() {
    local local_config_dir="$(config_dir $1)"
    if [ -f "$(config_dir $1)/$2" ]; then
        return true
    else
        return false
    fi
}

remove_config() {
    rm -f "$SNAP_DATA/$1/config/$2"
}

remove_config_as_daemon_user() {
    run_as_daemon_user rm -f "$SNAP_DATA/$1/config/$2"
}

get_snap_version_file() {
    cat "$SNAP_COMMON/version"
}

update_snap_version_file() {
    echo "$SNAP_VERSION" > "$SNAP_COMMON/version"
}

secret_exists() {
    if [ -f "$SECRET_DIR/$1" ]; then
        return true
    else
        return false
    fi
}

get_secret() {
    if $(secret_exists $1); then
        cat "$SECRET_DIR/$1"
    else
        echo_error "Password for $1 has not yet been generated"
    fi
}

set_secret() {
    echo "$2" > "$SECRET_DIR/$1"
    chmod 640 "$SECRET_DIR/$1"
    chown root:$DAEMON_USER "$SECRET_DIR/$1"
}

generate_secret() {
    if $(secret_exists $1); then
        echo_error "Password for $1 has already been generated"
        local secret=$(get_secret "$1")
    else
        local secret="$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c64)"
        set_secret "$1" "$secret"
    fi

    echo $secret
}

is_domain() {
    if regex_match '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return true
    else
        return false
    fi
}

get_domain() {
    while ! is_domain "$DOMAIN"; do
        read -p "Enter a valid domain: " DOMAIN
    done
    snapctl set domain=$DOMAIN
    export DOMAIN="$DOMAIN"
}

is_email() {
    if regex_match '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' "$1"; then
        return true
    else
        return false
    fi
}

get_email() {
    while ! is_email "$EMAIL"; do
        read -p "Enter a valid e-mail address: " EMAIL
    done
    snapctl set email=$EMAIL
    export EMAIL="$EMAIL"
}

check_removable_media() {
    if ! snapctl is-connected removable-media; then
        echo_error "The removable-media plug is not connected;"
        echo_error "Use 'snap connect $SNAP_NAME:removable-media' to enable it"
        exit 0
    fi
}

restart_required() {
    snapctl set system.restart-required.$1=true
}

reset_restart_required() {
    snapctl set system.restart-required.$1=false
}

restart_service_if_required() {
    if [ "$(snapctl get system.restart-required.$1)" == true ]; then
        echo Restart $1
        snapctl restart "$SNAP_NAME.$1"
        reset_restart_required $1
    fi
}

confirm() {
    read -rp "$1 [y/N] " response
    case "$response" in
        [yY])
            true;;
        *)
            false;;
    esac
}

rsync_clean() {
    rsync --no-perms --no-owner --no-group "$1" "$2" && \
        cd /tmp && find "$2" -path "*/$(basename $1)" \( \
            -type d -execdir chmod 755 "{}" \; -o \
            -type f -execdir chmod 644 "{}" \; \
        \)
}
