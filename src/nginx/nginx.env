#!/bin/bash

. "$SNAP/snap.env"

update_paths nginx

export HTTP_PORT="$(snapctl get ports.http)"
export HTTPS_PORT="$(snapctl get ports.https)"

export SSL_CERT="$CERT_DIR/${DOMAIN}_ecc/fullchain.cer"
export SSL_CERT_KEY="$CERT_DIR/${DOMAIN}_ecc/${DOMAIN}.key"

export NGINX_CACHE_DIR=/tmp/nginx/cache
export NGINX_DOMAIN="${DOMAIN:-localhost}"
export NGINX_ACCESS_LOG_FORMAT="$(snapctl get log.access.format)"
if [ "$(snapctl get log.access.enabled)" == true ]; then
    export NGINX_ACCESS_LOG="$LOG_DIR/access.log $NGINX_ACCESS_LOG_FORMAT"
else
    export NGINX_ACCESS_LOG=off
fi

certificate_exists() {
    if [ -f "$SSL_CERT" ]; then
        if [ -f "$SSL_CERT_KEY" ]; then
            return 0
        fi
    fi

    return 1
}

copy_nginx_configs() {
    copy_config nginx nginx.conf
    copy_config nginx locations.conf
    copy_config nginx acme-challenge.conf
}

nginx_config_file() {
    if $(certificate_exists); then
        echo "$(config_dir nginx)/mastodon-https.conf"
    else
        echo "$(config_dir nginx)/mastodon-http.conf"
    fi
}

nginx_get_http_port() {
    local port=$(sed -rn "s/.*listen ([0-9]*) default_server;/\1/p" "$(nginx_config_file)")
    if [ -z "$port" ]; then
        echo "$HTTP_PORT"
    else
        echo "$port"
    fi
}

nginx_get_https_port() {
    local port=$(sed -rn "s/.*listen ([0-9]*) ssl default_server;/\1/p" "$(nginx_config_file)")
    if [ -z "$port" ]; then
        echo "$HTTPS_PORT"
    else
        echo "$port"
    fi
}

nginx_get_access_log() {
    grep -m 1 -o "access_log .*;" "$(config_dir nginx)/nginx.conf" | sed -E "s/access_log (.*);/\1/"
}
