#!/bin/bash

. "$SNAP/snap.env"

update_paths postgres

export PG_SOCK_DIR="$SOCK_DIR/postgres"
export PG_LOG_DIR="$LOG_DIR/postgres"
export PG_LOG_FILE="$PG_LOG_DIR/postgres.log"
export PG_DATA_DIR="$SNAP_DATA/postgres/data"

get_postgres_version_file() {
    if [ -f "$SNAP_COMMON/pg_version" ]; then
        cat "$SNAP_COMMON/pg_version"
    else
        run_as_daemon_user cat "$SNAP_CURRENT/postgres/data/PG_VERSION"
    fi
}

update_postgres_version_file() {
    echo $(run_as_daemon_user cat "$SNAP_CURRENT/postgres/data/PG_VERSION") > "$SNAP_COMMON/pg_version"
}

postgres_waitready() {
    local count=10
    while [ "$count" -gt 0 ]; do
        if pg_isready -h "$PG_SOCK_DIR" -U postgres > /dev/null; then
            return 0
        fi
        sleep 1
        count=$((count-1))
    done
}

create_postgres_dirs() {
    mkdir_with_owner snap_daemon:root "$PG_SOCK_DIR"
    mkdir_with_owner snap_daemon:root "$SNAP_DATA/postgres"
    mkdir_with_permissions snap_daemon:root 775 "$PG_LOG_DIR"
}

create_postgres_log() {
    $(umask 007; touch "$PG_LOG_FILE")
    chown snap_daemon:root "$PG_LOG_FILE"
}

# NOTE: This is a fix for older versions and may be removed in the future
set_postgres_log_permissions() {
    chown snap_daemon:root "$PG_LOG_DIR"
    chown snap_daemon:root "$PG_LOG_FILE"
    run_as_daemon_user chmod 775 "$PG_LOG_DIR"
    run_as_daemon_user chmod 660 "$PG_LOG_FILE"
}

copy_postgres_config() {
    load_postgres_tuning_vars
    export POSTGRESQL_CONF="$(cat $SNAP/config/postgres/postgresql.conf)"
    run_as_daemon_user $SNAP/bin/save_postgres_config
}

enable_postgres_config() {
    run_as_daemon_user $SNAP/bin/enable_postgres_config
}

setup_postgres_database() {
    run_as_daemon_user initdb.wrapper
    run_as_daemon_user enable_postgres_config
    snapctl restart "$SNAP_NAME.postgres"
}

get_pg_max_connections() {
    local total_ram=$(get_total_ram)
    local pg_max_connections=$((100 + total_ram / 200 / MB))
    if [ $pg_max_connections -gt 500 ]; then
        pg_max_connections=500
    fi
    echo $pg_max_connections
}

# based on pgtune
load_postgres_tuning_vars() {
    local total_cpus=$(get_total_cpus)
    local total_ram=$(get_total_ram)

    export PG_SHARED_BUFFERS=$(size_unit $((total_ram / 4)))
    export PG_EFFECTIVE_CACHE_SIZE=$(size_unit $((total_ram*3 / 4)))
    export PG_MAX_WORKER_PROCESSES=$total_cpus
    export PG_MAX_PARALLEL_WORKERS_PER_GATHER=$((total_cpus > 8 ? 4 : (total_cpus + 1) / 2))
    export PG_MAX_PARALLEL_WORKERS=$PG_MAX_WORKER_PROCESSES
    export PG_MAX_PARALLEL_MAINTENANCE_WORKERS="$PG_MAX_PARALLEL_WORKERS_PER_GATHER"
    export PG_MAX_CONNECTIONS=$(get_pg_max_connections)
    PG_WORK_MEM=$((total_ram*3 / 4 / PG_MAX_CONNECTIONS))
    if [ $PG_MAX_PARALLEL_WORKERS_PER_GATHER -gt 1 ]; then
        PG_WORK_MEM=$((PG_WORK_MEM / (PG_MAX_PARALLEL_WORKERS_PER_GATHER - 1)))
    fi
    export PG_WORK_MEM=$(size_unit $PG_WORK_MEM)
    PG_MAINTENANCE_WORK_MEM=$((total_ram / 16))
    if [ $PG_MAINTENANCE_WORK_MEM -gt $(( 2 * $GB )) ]; then
        PG_MAINTENANCE_WORK_MEM=$(( 2 * GB ))
    fi
    export PG_MAINTENANCE_WORK_MEM=$(size_unit $PG_MAINTENANCE_WORK_MEM)
}
