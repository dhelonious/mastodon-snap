#!/bin/bash

. "$SNAP/snap.env"

update_paths postgres

export PG_SOCK_DIR="$SOCK_DIR/postgres"
export PG_LOG_DIR="$LOG_DIR/postgres"
export PG_LOG_FILE="$PG_LOG_DIR/postgres.log"
export PG_DATA_DIR="$SNAP_DATA/postgres/data"

get_postgres_version_file() {
    if [ -f "$SNAP_COMMON/pg_version" ]; then
        cat "$SNAP_COMMON/pg_version"
    else
        run_as_daemon_user cat "$SNAP_CURRENT/postgres/data/PG_VERSION"
    fi
}

update_postgres_version_file() {
    echo $(run_as_daemon_user cat "$SNAP_CURRENT/postgres/data/PG_VERSION") > "$SNAP_COMMON/pg_version"
}

postgres_waitready() {
    local count=10
    while [ "$count" -gt 0 ]; do
        if pg_isready -h "$PG_SOCK_DIR" -U postgres > /dev/null; then
            return 0
        fi
        sleep 1
        count=$((count-1))
    done
}

create_postgres_dirs() {
    mkdir_with_owner snap_daemon:root "$PG_SOCK_DIR"
    mkdir_with_owner snap_daemon:root "$SNAP_DATA/postgres"
    mkdir_with_permissions snap_daemon:root 775 "$PG_LOG_DIR"
}

create_postgres_log() {
    $(umask 007; touch "$PG_LOG_FILE")
    chown snap_daemon:root "$PG_LOG_FILE"
}

# NOTE: This is a fix for older versions and may be removed in the future
set_postgres_log_permissions() {
    chown snap_daemon:root "$PG_LOG_DIR"
    chown snap_daemon:root "$PG_LOG_FILE"
    run_as_daemon_user chmod 775 "$PG_LOG_DIR"
    run_as_daemon_user chmod 660 "$PG_LOG_FILE"
}

copy_postgres_config() {
    export POSTGRESQL_CONF="$(cat $SNAP/config/postgres/postgresql.conf)"
    run_as_daemon_user $SNAP/bin/save_postgres_config
}

setup_postgres_database() {
    run_as_daemon_user initdb.wrapper
    snapctl restart "$SNAP_NAME.postgres"
}
