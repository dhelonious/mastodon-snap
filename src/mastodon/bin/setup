#!/bin/bash -e

. "$SNAP/mastodon.env"
. "$SNAP/postgres.env"
. "$SNAP/redis.env"
. "$SNAP/nginx.env"

check_root

if mastodon_config_exists; then
    echo_error "Mastodon is already set up"
    exit 0
fi

while getopts "d:u:m:h" OPTION; do
    case "$OPTION" in
    d)
        if is_domain "$OPTARG"; then
            snapctl set domain="$OPTARG"
            export DOMAIN="$OPTARG"
        else
            echo "Invalid domain '$OPTARG'"
        fi
        ;;
    u)
        if is_username "$OPTARG"; then
            export USERNAME="$OPTARG"
        else
            echo "Invalid username '$OPTARG'"
        fi
        ;;
    m)
        if is_email "$OPTARG"; then
            snapctl set email="$OPTARG"
            export EMAIL="$OPTARG"
        else
            echo "Invalid email '$OPTARG'"
        fi
        ;;
    h)
        echo "Usage: $SNAP_NAME.setup -d DOMAIN -u USERNAME -m EMAIL"
        exit 0
        ;;
    esac
done
shift "$(($OPTIND -1))"

check_domain
check_email
check_status_max_chars
check_status_max_chars_counter

echo Create config
generate_mastodon_secrets
copy_mastodon_config

echo Setup database
create_mastodon_database
mastodon_rails db:setup > /dev/null
$SNAP/bin/psql.wrapper -d "$MASTODON_DBNAME" -c "create extension pg_stat_statements;" > /dev/null

if [ "$STATUS_MAX_CHARS" != "$(get_status_max_chars_file)" ]; then
    echo Update status character limit
    update_status_max_chars
    compilation_required
fi

if [ "$STATUS_MAX_CHARS_COUNTER" != "$(get_status_max_chars_counter_file)" ]; then
    echo Update status character counter
    update_status_max_chars_counter
    compilation_required
fi

echo Create admin account
get_username
$SNAP/bin/tootctl.wrapper accounts create "$USERNAME" --email "$EMAIL" --role Owner --confirmed --approve

$SNAP/bin/recompile_if_required

echo Restart services
snapctl restart "$SNAP_NAME.backend"
snapctl restart "$SNAP_NAME.sidekiq"
snapctl restart "$SNAP_NAME.streaming"
snapctl restart "$SNAP_NAME.nginx"
