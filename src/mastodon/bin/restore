#!/bin/bash -e

. "$SNAP/mastodon.env"
. "$SNAP/postgres.env"
. "$SNAP/redis.env"

check_root
check_service postgres

if [ -z "$1" ]; then
    echo "No backup specified"
    exit 0
fi

backup_dir="$BACKUP_DIR/$1"
echo Restore backup from $backup_dir

BACKUP_VERSION="$(cat $backup_dir/version)"
if [ "$BACKUP_VERSION" != "$SNAP_VERSION" ]; then
    echo CAUTION: You are trying to restore a backup from another version!
    echo "Snap version: $SNAP_VERSION"
    echo "Backup version: $BACKUP_VERSION"
    echo The backup may be incompatible or changes may be required.
    read -rp "Do you want to continue? [y/N] " response
    if ! [[ "$response" =~ ^([yY])$ ]]; then
        exit 0
    fi
fi

echo Restore settings
cat "$backup_dir/settings" | while read setting; do
    snapctl set $setting
done

if [ "$(snapctl get media.dir)" != "$(get_media_dir_link)" ]; then
    echo Link media dir
    link_media_dir
fi

echo Stop services
snapctl stop "$SNAP_NAME.nginx"
snapctl stop "$SNAP_NAME.backend"
snapctl stop "$SNAP_NAME.sidekiq"

echo Drop old database
$SNAP/bin/psql.wrapper -c "drop owned by $MASTODON_DBUSER cascade;"
$SNAP/bin/psql.wrapper -c "drop database if exists $MASTODON_DBNAME;"
# $SNAP/bin/psql.wrapper -c "drop role if exists $MASTODON_DBUSER;"

echo Restore configuration
rsync --ignore-times --no-owner --no-perms --chmod g+w --chown root:$DAEMON_USER "$backup_dir/mastodon.conf" "$SNAP_COMMON/" \
    && chmod 664 "$SNAP_COMMON/mastodon.conf"
link_mastodon_config

mastodon_set_var DB_PASS "$(get_secret postgres)"
# mastodon_set_var REDIS_PASSWORD "$(get_secret redis)"

echo Restore database
$SNAP/bin/psql.wrapper -f "$backup_dir/database.sql" template1 > /dev/null
if [ "$BACKUP_VERSION" != "$SNAP_VERSION" ]; then
    if confirm "Do you want to start a database migration?"; then
        mastodon_db_migrate
    elif confirm "Do you want to start a database rollback instead?"; then
        mastodon_db_rollback
    fi
fi

if [ -f "$backup_dir/redis.rdb" ]; then
    echo Restore redis database
    snapctl stop "$SNAP_NAME.redis"
    run_as_daemon_user cp "$backup_dir/redis.rdb" "$REDIS_DATA/"
    snapctl start "$SNAP_NAME.redis"
fi

echo Clean up media references
$SNAP/bin/tootctl.wrapper preview_cards remove --days 1
$SNAP/bin/tootctl.wrapper media remove --days 1

if [ -f "$backup_dir/media.tar.gz" ]; then
    echo Restore uploads
    run_as_daemon_user tar -xzf "$backup_dir/media.tar.gz" -C "$MEDIA_DIR" --strip-components=1 --no-same-permissions --no-same-owner --skip-old-files

    echo The following action may take a long time to complete
    # TODO: make --concurrency N configurable (default 5)
    confirm "Refresh remote account avatars and headers?" && \
        $SNAP/bin/tootctl.wrapper accounts refresh --all --concurrency 5
fi

$SNAP/bin/recompile_if_required

echo Restart services
snapctl start "$SNAP_NAME.backend"
snapctl start "$SNAP_NAME.sidekiq"
snapctl start "$SNAP_NAME.nginx"
snapctl restart "$SNAP_NAME.streaming"
