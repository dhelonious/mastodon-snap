#!/bin/bash

. "$SNAP/snap.env"
. "$SNAP/postgres.env"
. "$SNAP/imagemagick.env"

update_paths mastodon "$SNAP_DATA"
update_paths jemalloc
update_paths libc-musl
update_paths ruby
update_paths node
update_paths yarn

export MASTODON_DBUSER=mastodon
export MASTODON_DBNAME=mastodon

export RUBYLIB="$SNAP/ruby/lib/ruby/3.2.0:$SNAP/ruby/lib/ruby/3.2.0/$SNAP_ARCH"
export BUNDLE_PATH="$SNAP_DATA/mastodon/vendor/bundle"
export BUNDLE_GEMFILE="$SNAP_DATA/mastodon/Gemfile"
export BUNDLE_RAKEFILE="$SNAP_DATA/mastodon/Rakefile"
export GEM_HOME="$SNAP_DATA/mastodon/vendor/ruby"
export GEM_PATH="$GEM_HOME"
export YARN_RC_FILENAME="$SNAP_DATA/mastodon/.yarnrc.yml"
export YARN_CONFIG_DIR="$SNAP_DATA/mastodon"
export YARN_CACHE_FOLDER=/tmp/yarn/cache

export UPDATE_BACKUPS="$(snapctl get update.backups)"
export MEDIA_DIR="$(snapctl get media.dir)"
export BACKUP_DIR="$(snapctl get backup.dir)"
export BACKUP_DAYS="$(snapctl get backup.days)"
export CLEANUP_DAYS="$(snapctl get cleanup.days)"
export CLEANUP_MEDIA="$(snapctl get cleanup.media)"
export CLEANUP_PREVIEWS="$(snapctl get cleanup.previews)"
export CLEANUP_STATUSES="$(snapctl get cleanup.statuses)"
export CLEANUP_ORPHANS="$(snapctl get cleanup.orphans)"
export STATUS_MAX_CHARS="$(snapctl get status.char-limit)"
export STATUS_MAX_CHARS_COUNTER="$(snapctl get status.char-counter)"

compose_form="$SNAP_DATA/mastodon/app/javascript/mastodon/features/compose/components/compose_form.jsx"
status_length_validator="$SNAP_DATA/mastodon/app/validators/status_length_validator.rb"

mastodon_config_exists() {
    if [ -f "$SNAP_COMMON/mastodon.conf" ]; then
        return 0
    else
        return 1
    fi
}

mastodon_set_var() {
    if $(mastodon_config_exists); then
        sed -ri "s,$1=([^ ]*|'[^']*'|"'"[^"]*"'"),$1=$2," "$SNAP_COMMON/mastodon.conf"
    else
        echo_error "$SNAP_COMMON/mastodon.conf does not exist."
        exit 1
    fi
}

mastodon_get_var() {
    if $(mastodon_config_exists); then
        sed -rn "s,.*$1=([^ ]*|'[^']*'|"'"[^"]*"'"),\1,p" "$SNAP_COMMON/mastodon.conf"
    fi
}

if mastodon_config_exists; then
    export SECRET_KEY_BASE="$(mastodon_get_var SECRET_KEY_BASE)"
    export OTP_SECRET="$(mastodon_get_var OTP_SECRET)"
fi

mastodon_rake() {
    cd "$SNAP_DATA/mastodon" && bundle exec rake -f "$BUNDLE_RAKEFILE" "$@"
}

mastodon_rails() {
    cd "$SNAP_DATA/mastodon" && bundle exec rails "$@"
}

mastodon_node() {
    cd "$SNAP_DATA/mastodon" && node "$@"
}

mastodon_yarn() {
    mkdir -p "$YARN_CACHE_FOLDER"
    cd "$SNAP_DATA/mastodon" && yarn "$@"
}

mastodon_sidekiq() {
    cd "$SNAP_DATA/mastodon" && bundle exec sidekiq "$@"
}

mastodon_tootctl() {
    cd "$SNAP_DATA/mastodon" && bundle exec tootctl "$@"
}

check_setup() {
    if ! $(mastodon_config_exists); then
        echo "Mastodon is not yet set up"
        exit 0
    fi
}

setup_mastodon_database() {
    postgres_waitready
    psql.wrapper -c "create user $MASTODON_DBUSER with password '$PG_PASSWORD';"
    psql.wrapper -c "alter user $MASTODON_DBUSER createdb;"
}

generate_mastodon_secrets() {
    eval $(mastodon_rake mastodon:webpush:generate_vapid_key)
    export SECRET_KEY_BASE="$(mastodon_rake secret)"
    export OTP_SECRET="$(mastodon_rake secret)"
    export VAPID_PRIVATE_KEY="$VAPID_PRIVATE_KEY"
    export VAPID_PUBLIC_KEY="$VAPID_PUBLIC_KEY"
}

link_mastodon_config() {
    ln -sfn "$SNAP_COMMON/mastodon.conf" "$SNAP_DATA/mastodon/.env.production"
}

copy_mastodon_config() {
    copy_envsubst "$SNAP/config/mastodon/mastodon.conf" "$SNAP_COMMON/mastodon.conf"
    link_mastodon_config
}

update_bundle_path() {
    sed -i "s|^BUNDLE_PATH: .*\$|BUNDLE_PATH: \"$SNAP_DATA/mastodon/vendor/bundle\"|" "$SNAP_DATA/mastodon/.bundle/config"
}

link_media_dir() {
    mkdir -p "$MEDIA_DIR"
    ln -sfn "$MEDIA_DIR" "$SNAP_DATA/mastodon/public/system"
}

update_mastodon_files() {
    rsync -a --delete --no-o --no-g "$SNAP/mastodon" "$SNAP_DATA"
    update_bundle_path
    link_media_dir
}

load_mastodon_env() {
    local config="${1:-$SNAP_COMMON/mastodon.conf}"
    set -a
    source "$config"
    set +a
}

get_backup_dir_file() {
    cat "$SNAP_COMMON/backup.dir"
}

update_backup_dir_file() {
    echo "$BACKUP_DIR" > "$SNAP_COMMON/backup.dir"
}

mastodon_announcement() {
    if ! [ -z $(psql.wrapper -tc "select datname from pg_catalog.pg_database where datname='$MASTODON_DBNAME'") ]; then
        psql.wrapper -d $MASTODON_DBNAME -c "insert into announcements (text, created_at, updated_at, published) values ('$1', now(), now(), '${2:-f}');"
    fi
}

recompile_required() {
    snapctl set recompile-required=true
}

reset_recompile_required() {
    snapctl set recompile-required=false
}

get_status_max_chars_file() {
    sed -rn "s/.*MAX_CHARS = ([0-9]+)/\1/p" "$status_length_validator"
}

update_status_max_chars() {
    sed -ri "s/length\(fulltext\) > [0-9]+/length(fulltext) > $STATUS_MAX_CHARS/" "$compose_form"
    sed -ri "s/MAX_CHARS = [0-9]+/MAX_CHARS = $STATUS_MAX_CHARS/" "$status_length_validator"
}

check_status_max_chars() {
    while ! is_number "$STATUS_MAX_CHARS"; do
        echo "Enter a valid number for the status char limit:"
        read STATUS_MAX_CHARS

        snapctl set status.char-limit=$STATUS_MAX_CHARS
        export STATUS_MAX_CHARS="$STATUS_MAX_CHARS"
    done
}

get_status_max_chars_counter_file() {
    sed -rn "s/.*CharacterCounter max=\{([0-9]+)\}/\1/p" "$compose_form"
}

update_status_max_chars_counter() {
    sed -ri "s/CharacterCounter max=\{[0-9]+\}/CharacterCounter max={$STATUS_MAX_CHARS_COUNTER}/" "$compose_form"
}

check_status_max_chars_counter() {
    while ! is_number "$STATUS_MAX_CHARS_COUNTER"; do
        echo "Enter a valid number for the status char counter:"
        read STATUS_MAX_CHARS_COUNTER

        snapctl set status.char-limit=$STATUS_MAX_CHARS_COUNTER
        export STATUS_MAX_CHARS_COUNTER="$STATUS_MAX_CHARS_COUNTER"
    done
}
