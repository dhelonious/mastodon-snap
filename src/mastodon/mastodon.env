#!/bin/bash

. "$SNAP/snap.env"
. "$SNAP/postgres.env"
. "$SNAP/redis.env"

update_paths mastodon "$SNAP_DATA"
update_paths ruby
update_paths node
update_paths libvips
update_paths ffmpeg

export MASTODON_DBUSER=mastodon
export MASTODON_DBNAME=mastodon
export MASTODON_HOME="$SNAP_DATA/mastodon"
export MASTODON_USE_LIBVIPS=true

export HOME="$MASTODON_HOME"
export XDG_CONFIG_HOME="$MASTODON_HOME"

export RUBY_VERSION="$(cat $SNAP/mastodon/.ruby-version)"
export RUBY_BRANCH="${RUBY_VERSION%.*}"
export RUBYLIB="$SNAP/ruby/lib/ruby/$RUBY_BRANCH.0:$SNAP/ruby/lib/ruby/$RUBY_BRANCH.0/$SNAP_ARCH:$SNAP/mastodon/vendor/bundle/ruby/$RUBY_BRANCH.0"
export BUNDLE_PATH="$MASTODON_HOME/vendor/bundle"
export BUNDLE_GEMFILE="$MASTODON_HOME/Gemfile"
export BUNDLE_RAKEFILE="$MASTODON_HOME/Rakefile"
export GEM_HOME="$MASTODON_HOME/vendor/ruby"
export GEM_PATH="$GEM_HOME"
export YARN_RC_FILENAME="$MASTODON_HOME/.yarnrc.yml"
export YARN_CACHE_FOLDER="$MASTODON_HOME/.cache/yarn"
export YARN_IGNORE_PATH=1
export COREPACK_HOME="$MASTODON_HOME/.cache/corepack"
export NODE_OPTIONS="--max-old-space-size=2048"
export RAILS_HOSTS="localhost,127.0.0.1,$DOMAIN"

export UPDATE_BACKUP="$(snapctl get update.backup)"
export UPDATE_ANNOUNCEMENT="$(snapctl get update.announcement)"
export MEDIA_DIR="$(snapctl get media.dir)"
export BACKUP_DIR="$(snapctl get backup.dir)"
export BACKUP_DAYS="$(snapctl get backup.days)"
export CLEANUP_DAYS="$(snapctl get cleanup.days)"
export CLEANUP_MEDIA="$(snapctl get cleanup.media)"
export CLEANUP_HEADERS="$(snapctl get cleanup.headers)"
export CLEANUP_PREVIEWS="$(snapctl get cleanup.previews)"
export CLEANUP_STATUSES="$(snapctl get cleanup.statuses)"
export CLEANUP_ORPHANS="$(snapctl get cleanup.orphans)"
export CLEANUP_ACCOUNTS="$(snapctl get cleanup.accounts)"
export STATUS_LENGTH="$(snapctl get status.length)"

compose_form="$MASTODON_HOME/app/javascript/mastodon/features/compose/components/compose_form.jsx"
status_length_validator="$MASTODON_HOME/app/validators/status_length_validator.rb"

mastodon_config_exists() {
    if [ -f "$SNAP_COMMON/mastodon.conf" ]; then
        return 0
    else
        return 1
    fi
}

mastodon_get_var() {
    if mastodon_config_exists; then
        sed -rn "s,^.*$1=([^ ]*|'[^']*'|"'"[^"]*"'").*$,\1,p" "$SNAP_COMMON/mastodon.conf"
    fi
}

mastodon_set_var() {
    if mastodon_config_exists; then
        if grep -qF "$1=" "$SNAP_COMMON/mastodon.conf"; then
            $SNAP/bin/sed_inline "s,$1=([^ ]*|'[^']*'|"'"[^"]*"'"),$1=$2," "$SNAP_COMMON/mastodon.conf"
        else
            $SNAP/bin/append "$1=$2" "$SNAP_COMMON/mastodon.conf"
        fi
    else
        echo_error "$SNAP_COMMON/mastodon.conf does not exist."
        exit 1
    fi
}

load_mastodon_env() {
    if mastodon_config_exists; then
        set -a
        source "$SNAP_COMMON/mastodon.conf"
        source "$SNAP_CURRENT/server.conf"
        set +a
    else
        export OTP_SECRET=precompile_placeholder
        export SECRET_KEY_BASE=precompile_placeholder
        export ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=precompile_placeholder
        export ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=precompile_placeholder
        export ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=precompile_placeholder
        export IGNORE_ALREADY_SET_SECRETS=true
    fi
}

mastodon_rails() {
    load_mastodon_env
    cd "$MASTODON_HOME" && run_as_daemon_user bundle exec rails "$@"
}

mastodon_streaming() {
    load_mastodon_env
    cd "$MASTODON_HOME" && run_as_daemon_user node streaming "$@"
}

mastodon_sidekiq() {
    load_mastodon_env
    cd "$MASTODON_HOME" && run_as_daemon_user bundle exec sidekiq "$@"
}

mastodon_tootctl() {
    load_mastodon_env
    cd "$MASTODON_HOME" && run_as_daemon_user bundle exec tootctl "$@"
}

check_setup() {
    if ! mastodon_config_exists; then
        echo "Mastodon is not yet set up"
        exit 0
    fi
}

create_mastodon_database() {
    postgres_waitready
    psql.wrapper -c "create user $MASTODON_DBUSER with password '$PG_PASSWORD';"
    psql.wrapper -c "alter user $MASTODON_DBUSER createdb;"
}

generate_mastodon_vapid_secrets() {
    eval $(mastodon_rails mastodon:webpush:generate_vapid_key)
    export VAPID_PRIVATE_KEY="$VAPID_PRIVATE_KEY"
    export VAPID_PUBLIC_KEY="$VAPID_PUBLIC_KEY"
}

generate_mastodon_db_encryption_secrets() {
    eval $(mastodon_rails db:encryption:init | grep --color=never ACTIVE_RECORD)
    export ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY="$ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY"
    export ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY="$ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY"
    export ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT="$ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT"
}

generate_mastodon_secrets() {
    export SECRET_KEY_BASE="$(mastodon_rails secret)"
    export OTP_SECRET="$(mastodon_rails secret)"
    generate_mastodon_vapid_secrets
    generate_mastodon_db_encryption_secrets
}

copy_mastodon_server_config() {
    envsubst_file "$(cat $SNAP/config/mastodon/server.conf)" "$SNAP_CURRENT/server.conf"
    chown root:$DAEMON_USER "$SNAP_CURRENT/server.conf"
    chmod 644 "$SNAP_CURRENT/server.conf"
}

copy_mastodon_config() {
    envsubst_file "$(cat $SNAP/config/mastodon/mastodon.conf)" "$SNAP_COMMON/mastodon.conf"
    chown root:$DAEMON_USER "$SNAP_COMMON/mastodon.conf"
    chmod 664 "$SNAP_COMMON/mastodon.conf"
}

update_bundle_path() {
    run_as_daemon_user $SNAP/bin/sed_inline "s|^BUNDLE_PATH: .*$|BUNDLE_PATH: \"$MASTODON_HOME/vendor/bundle\"|" "$MASTODON_HOME/.bundle/config"
}

link_media_dir() {
    if [ -d "$MEDIA_DIR" ]; then
        run_as_daemon_user rm -rf "$MASTODON_HOME/public/system"
        run_as_daemon_user ln -sfn "$MEDIA_DIR" "$MASTODON_HOME/public/system"
    fi
}

get_media_dir_link() {
    readlink -f "$MASTODON_HOME/public/system"
}

fix_daemon_user_media_dir() {
    if [ "$(get_owner $MEDIA_DIR)" != "$DAEMON_USER" ]; then
        chown -fR $DAEMON_USER:$DAEMON_USER --from root --no-dereference "$MEDIA_DIR/" || true
    fi
}

update_mastodon_files() {
    run_as_daemon_user rsync -rtl --ignore-times --delete --force --chmod g+rw --chown=$DAEMON_USER:root --exclude="\..+.rb\..+" "$SNAP/mastodon" "$SNAP_DATA"
    update_bundle_path
    link_media_dir
}

upgrade_mastodon_config() {
    if mastodon_config_exists; then
        cat "$SNAP/config/mastodon/mastodon.conf" | \
            while IFS= read -r line
        do
            if [ -z "$line" ] || [ "${line:0:1}" = "#" ]; then
                continue
            fi
            IFS="=" read -r key value <<< "$line"

            if [ "$key" == "LOCAL_DOMAIN" ]; then
                value=$(envsubst <<< "$value")
                mastodon_set_var "$key" "$value"
            fi
        done
        load_mastodon_env
    fi
}

get_backup_dir_file() {
    cat "$SNAP_COMMON/backup.dir"
}

update_backup_dir_file() {
    echo "$BACKUP_DIR" > "$SNAP_COMMON/backup.dir"
}

mastodon_add_announcement() {
    postgres_waitready
    if ! [ -z $(psql.wrapper -tc "select datname from pg_catalog.pg_database where datname='$MASTODON_DBNAME'") ]; then
        psql.wrapper -d $MASTODON_DBNAME -Atc "insert into announcements (text, created_at, updated_at, published) values ('$*', now(), now(), '${PUBLISH_FLAG:-f}') returning id;" | head -n 1
    fi
}

mastodon_publish_announcement() {
    PUBLISH_FLAG=t mastodon_add_announcement "$*"
}

mastodon_remove_announcement() {
    postgres_waitready
    if ! [ -z $(psql.wrapper -tc "select datname from pg_catalog.pg_database where datname='$MASTODON_DBNAME'") ]; then
        psql.wrapper -d $MASTODON_DBNAME -c "delete from announcements where id = '$1';" > /dev/null
    fi
}

compilation_required() {
    snapctl set system.compilation-required=true
    restart_required backend
    restart_required sidekiq
    restart_required streaming
}

reset_compilation_required() {
    snapctl set system.compilation-required=false
}

is_compilation_required() {
    if [ "$(snapctl get system.compilation-required)" == "true" ]; then
        return 0
    else
        return 1
    fi
}

migrations_required() {
    snapctl set system.migrations-required=true
    restart_required backend
    restart_required sidekiq
}

reset_migrations_required() {
    snapctl set system.migrations-required=false
}

is_migrations_required() {
    if [ "$(snapctl get system.migrations-required)" == "true" ]; then
        return 0
    else
        return 1
    fi
}

migrations_waitready() {
    while true; do
        if ! is_active "migrations"; then
            exit 0
        fi
        echo "Waiting for migrations to finish..."
        sleep 30
    done
}

get_status_length_file() {
    run_as_daemon_user sed -rn "s/^.*MAX_CHARS = ([0-9]+).*$/\1/p" "$status_length_validator"
}

update_status_length() {
    run_as_daemon_user $SNAP/bin/sed_inline "s/MAX_CHARS = [0-9]+/MAX_CHARS = $STATUS_LENGTH/" "$status_length_validator"
    run_as_daemon_user $SNAP/bin/sed_inline "s/length\(fulltext\) > [0-9]+/length(fulltext) > $STATUS_LENGTH/" "$compose_form"
    run_as_daemon_user $SNAP/bin/sed_inline "s/CharacterCounter max=\{[0-9]+\}/CharacterCounter max={$STATUS_LENGTH}/" "$compose_form"
}

get_status_length() {
    while ! is_number "$STATUS_LENGTH"; do
        read -p "Enter a valid number for the status char limit: " STATUS_LENGTH
        snapctl set status.length=$STATUS_LENGTH
        export STATUS_LENGTH="$STATUS_LENGTH"
    done
}

mastodon_db_migrate() {
    postgres_waitready
    mastodon_rails db:migrate "$@"
}

mastodon_db_rollback() {
    postgres_waitready
    mastodon_rails db:rollback "$@"
}

pre_refresh_tasks_required() {
    snapctl set system.pre-refresh-tasks-required=true
}

reset_pre_refresh_tasks_required() {
    snapctl set system.pre-refresh-tasks-required=false
}

is_pre_refresh_tasks_required() {
    if [ "$(snapctl get system.pre-refresh-tasks-required)" == "true" ]; then
        return 0
    else
        return 1
    fi
}

post_refresh_tasks_required() {
    snapctl set system.post-refresh-tasks-required=true
}

reset_post_refresh_tasks_required() {
    snapctl set system.post-refresh-tasks-required=false
}

is_post_refresh_tasks_required() {
    if [ "$(snapctl get system.post-refresh-tasks-required)" == "true" ]; then
        return 0
    else
        return 1
    fi
}

is_username() {
    if regex_match '^[a-zA-Z0-9_]+$' "$1" && \
     ! regex_match '^(root|admin|administrator|mod|moderator|support|help|webmaster)$' "$1"
    then
        return 0
    else
        return 1
    fi
}

get_username() {
    while ! is_username "$USERNAME"; do
        read -p "Enter a valid username: " USERNAME
    done
    export USERNAME="$USERNAME"
}
