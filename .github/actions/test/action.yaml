name: test
run-name: Test installation
inputs:
  snap:
    required: true
    type: string
  upgrade:
    required: false
    type: boolean
    default: false
runs:
  using: composite
  steps:
  - name: define color commands
    shell: bash
    run: |
      RED="\033[31m"
      GREEN="\033[32m"
      YELLOW="\033[33m"
      RESET="\033[0m"
      SHEBANG="#!/bin/bash"
      echo_color() { echo "while IFS= read -r line; do echo -e \"$1\$(\$line | tr -d '\0')$RESET\"; done <<< \"\$1\""; }
      mkdir -p ~/bin
      echo -e "$SHEBANG\n$(echo_color $RED)" > ~/bin/echo_red
      echo -e "$SHEBANG\n$(echo_color $GREEN)" > ~/bin/echo_green
      echo -e "$SHEBANG\n$(echo_color $YELLOW)" > ~/bin/echo_yellow
      sudo chmod +x ~/bin/*
      echo "$HOME/bin" >> $GITHUB_PATH
  - name: set permissions on resolv.conf
    shell: bash
    run: sudo chmod 644 /etc/resolv.conf
  - name: enable memory overcommit
    shell: bash
    run: sudo sysctl vm.overcommit_memory=1
  - uses: actions/download-artifact@v4
    with:
      name: ${{ inputs.snap }}
  - name: print info
    shell: bash
    run: |
      echo_yellow "Run tests for ${{ inputs.snap }}"
  - name: set environment
    id: env
    shell: bash
    run: |
      echo_yellow "Set environment variables"
      echo "DOMAIN=local.host" >> $GITHUB_OUTPUT
      echo "HTTP_PORT=81" >> $GITHUB_OUTPUT
      echo "HTTPS_PORT=444" >> $GITHUB_OUTPUT
      echo "COMPOSE_FORM_FILE=/var/snap/mastodon-server/current/mastodon/app/javascript/mastodon/features/compose/components/compose_form.jsx" >> $GITHUB_OUTPUT
      echo "STATUS_LENGTH_VALIDATOR_FILE=/var/snap/mastodon-server/current/mastodon/app/validators/status_length_validator.rb" >> $GITHUB_OUTPUT
      echo "LIMIT=600" >> $GITHUB_OUTPUT
      echo "COUNTER=400" >> $GITHUB_OUTPUT
  - name: install and setup previous snap
    if: ${{ inputs.upgrade == 'true' }}
    shell: bash
    run: |
      echo_yellow "Install previous snap"
      sudo snap install mastodon-server
      sleep 10
      sudo snap set mastodon-server domain="${{ steps.env.outputs.domain }}"
      sudo mastodon-server.setup
      sleep 10
  - name: install snap
    shell: bash
    run: |
      echo_yellow "Install snap (upgrade=${{ inputs.upgrade }})"
      if INSTALL_OUTPUT=$(sudo snap install --dangerous ${{ inputs.snap }}); then
        echo_green "Snap installation completed successfully"
      else
        echo_red "Snap installation failed"
        echo_yellow "$INSTALL_OUTPUT"
        exit 1
      fi
      sleep 10
  - name: refresh snap
    if: ${{ inputs.upgrade == 'false' }}
    shell: bash
    run: |
      echo_yellow "Refresh snap"
      if REFRESH_OUTPUT=$(sudo snap install --dangerous ${{ inputs.snap }}); then
        echo_green "Snap refresh completed successfully"
      else
        echo_red "Snap refresh failed"
        echo_yellow "$REFRESH_OUTPUT"
        exit 1
      fi
      sleep 10
  - name: test setup
    if: ${{ inputs.upgrade == 'false' }}
    shell: bash
    run: |
      echo_yellow "Test setup"
      sudo snap set mastodon-server domain="${{ steps.env.outputs.domain }}"
      if sudo mastodon-server.setup; then
        echo_green "Mastodon setup completed successfully"
      else
        echo_red "Mastodon setup failed"
        echo_yellow "Snap logs:"
        echo_yellow "$(sudo snap logs mastodon-server -n=all)"
        exit 1
      fi
      sleep 30
  - name: check services
    shell: bash
    run: |
      echo_yellow "Check service statuses"
      check_service_status() {
        STATUS=$(snap services mastodon-server | sed -rn "s/.*\.$1 +([a-z]+) +([a-z]+).*/\1,\2/p")
        if [ "$STATUS" = "enabled,active" ]; then
          echo_green "$1 $STATUS"
        else
          echo_red "$1 $STATUS"
          echo_yellow "Snap logs for $1:"
          echo_yellow "$(sudo snap logs mastodon-server.$1 -n=all)"
          exit 1
        fi
      }
      check_service_status redis
      check_service_status postgres
      check_service_status backend
      check_service_status sidekiq
      check_service_status streaming
      check_service_status nginx
  - name: check reachability
    shell: bash
    run: |
      echo_yellow "Check reachability"
      HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve ${{ steps.env.outputs.domain }}:80:127.0.0.1 http://${{ steps.env.outputs.domain }}:80)
      if [ "$HTTP_STATUS" -eq 200 ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "HTTP_STATUS=$HTTP_STATUS"
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: generate ssl certificates
    shell: bash
    run: |
      echo_yellow "Generate SSL certificate"
      CERT_DIR="/var/snap/mastodon-server/common/certs/${{ steps.env.outputs.domain }}_ecc"
      sudo mkdir -p "$CERT_DIR"
      echo "Create self signed certificate"
      sudo openssl req -x509 -newkey rsa:2048 -sha256 -keyout "$CERT_DIR/${{ steps.env.outputs.domain }}.key" -days 1 -nodes -out "$CERT_DIR/fullchain.cer" -subj "/CN=${{ steps.env.outputs.domain }}"
      echo "Restart mastodon-server.nginx"
      sudo snap restart mastodon-server.nginx
      sleep 10
  - name: check if https config is created
    shell: bash
    run: |
      echo_yellow "Check if HTTPS is enabled"
      if sudo test -f "/var/snap/mastodon-server/current/nginx/config/mastodon-https.conf"; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        exit 1
      fi
  - name: change http/https ports
    shell: bash
    run: |
      echo_yellow "Change HTTP/HTTPS ports"
      sudo snap set mastodon-server ports.http=${{ steps.env.outputs.HTTP_PORT }} ports.https=${{ steps.env.outputs.HTTPS_PORT }}
      sleep 30
  - name: check http port
    shell: bash
    run: |
      echo_yellow "Check HTTP port"
      HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve "${{ steps.env.outputs.domain }}:${{ steps.env.outputs.HTTP_PORT }}:127.0.0.1" "http://${{ steps.env.outputs.domain }}:${{ steps.env.outputs.HTTP_PORT }}")
      if [ "$HTTP_STATUS" -eq 301 ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "HTTP_STATUS=$HTTP_STATUS"
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: check https port
    shell: bash
    run: |
      echo_yellow "Check HTTPS port"
      HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve "${{ steps.env.outputs.domain }}:${{ steps.env.outputs.HTTPS_PORT }}:127.0.0.1" "https://${{ steps.env.outputs.domain }}:${{ steps.env.outputs.HTTPS_PORT }}" --insecure)
      if [ "$HTTPS_STATUS" -eq 200 ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "HTTPS_STATUS=$HTTPS_STATUS"
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: connect removable-media
    shell: bash
    run: |
      echo_yellow "Connect removalbe-media"
      sudo snap connect mastodon-server:removable-media
  - name: change media dir
    shell: bash
    run: |
      echo_yellow "Change media dir"
      sudo mkdir -p ~/media
      if COMMAND_OUTPUT=$(sudo mastodon-server.external-media-dir ~/media); then
        echo_green "Test passed"
      else
        echo_red "Test failed"
        echo_yellow "$COMMAND_OUTPUT"
        exit 1
      fi
  - name: test export
    shell: bash
    run: |
      echo_yellow "Test export"
      if EXPORT_OUTPUT=$(sudo mastodon-server.export); then
        echo_green "Test passed"
      else
        echo_red "Test failed"
        echo_yellow "$EXPORT_OUTPUT"
        exit 1
      fi
      BACKUP_DIR=$(echo "$EXPORT_OUTPUT" | sed -rn "s|^Export backup to .*/([0-9]+-[0-9]+)$|\1|p")
      echo "backup_dir=$BACKUP_DIR" >> $GITHUB_OUTPUT
    id: export
  - name: test restore
    shell: bash
    run: |
      echo_yellow "Test restore"
      if RESTORE_OUTPUT=$(bash -c "yes || true" | sudo mastodon-server.restore ${{ steps.export.outputs.backup_dir }}); then
        echo_green "Test passed"
      else
        echo_red "Test failed"
        echo_yellow "$RESTORE_OUTPUT"
        exit 1
      fi
  - name: trigger recompile
    shell: bash
    run: |
      echo_yellow "Trigger recompile"
      sudo snap set mastodon-server status.char-limit=${{ steps.env.outputs.LIMIT }} status.char-counter=${{ steps.env.outputs.COUNTER }}
  - name: check max chars
    shell: bash
    run: |
      echo_yellow "Check 'MAX_CHARS' in ${{ steps.env.outputs.STATUS_LENGTH_VALIDATOR_FILE }}"
      MAX_CHARS=$(sudo sed -rn "s/^.*MAX_CHARS = ([0-9]+).*$/\1/p" "${{ steps.env.outputs.STATUS_LENGTH_VALIDATOR_FILE }}")
      if [ "$MAX_CHARS" -eq "${{ steps.env.outputs.LIMIT }}" ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "MAX_CHARS=$MAX_CHARS"
        exit 1
      fi
  - name: check length fulltext
    shell: bash
    run: |
      echo_yellow "Check 'length(fulltext)' in ${{ steps.env.outputs.COMPOSE_FORM_FILE }}"
      LENGTH_FULLTEXT=$(sudo sed -rn "s/^.*length\(fulltext\) > ([0-9]+).*$/\1/p" "${{ steps.env.outputs.COMPOSE_FORM_FILE }}")
      if [ "$LENGTH_FULLTEXT" -eq "${{ steps.env.outputs.LIMIT }}" ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "LENGTH_FULLTEXT=$LENGTH_FULLTEXT"
        exit 1
      fi
  - name: check character counter max
    shell: bash
    run: |
      echo_yellow "Check 'CharacterCounter max' in ${{ steps.env.outputs.COMPOSE_FORM_FILE }}"
      CHARACTER_COUNTER_MAX=$(sudo sed -rn "s/^.*CharacterCounter max=\{([0-9]+)\}.*$/\1/p" "${{ steps.env.outputs.COMPOSE_FORM_FILE }}")
      if [ "$CHARACTER_COUNTER_MAX" -eq "${{ steps.env.outputs.COUNTER }}" ]; then
        echo_green "Check passed"
      else
        echo_red "Check failed"
        echo_yellow "CHARACTER_COUNTER_MAX=$CHARACTER_COUNTER_MAX"
        exit 1
      fi
  - name: test rails console
    shell: bash
    run: |
      echo_yellow "Test rails console"
      if CONSOLE_OUTPUT="$(echo "exit" | sudo mastodon-server.console --sandbox)"; then
        if ! [ -z "$(echo "'"$CONSOLE_OUTPUT"'" | grep 'Loading production environment')" ]; then
          echo_green "Test passed"
        else
          echo_red "Test failed"
          echo_yellow "$CONSOLE_OUTPUT"
          exit 1
        fi
      fi
  - name: test postgres dump
    shell: bash
    run: |
      echo_yellow "Test postgres dump"
      sudo mastodon-server.db-dump > ~/dump.sql
      if sudo grep -q "DROP DATABASE mastodon" ~/dump.sql; then
        echo_green "Test passed"
      else
        echo_red "Test failed"
        echo_yellow "$(sudo head ~/dump.sql)"
        exit 1
      fi
  - name: check logs for warnings
    shell: bash
    run: |
      echo_yellow "Check logs for warnings"
      LOG_WARNINGS=$(sudo grep -i warning /var/snap/mastodon-server/current/logs/*)
      if [ -z "$LOG_WARNINGS" ]; then
        echo_green "No warnings"
      else
        echo_yellow "$LOG_WARNINGS"
      fi
  - name: check logs for errors
    shell: bash
    run: |
      echo_yellow "Check logs for errors"
      LOG_ERRORS=$(sudo grep -iE "error|failure|failed" /var/snap/mastodon-server/current/logs/*)
      if [ -z "$LOG_ERRORS" ]; then
        echo_green "No errors"
      else
        echo_red "$LOG_ERRORS"
        exit 1
      fi
  - name: remove snap
    shell: bash
    run: |
      echo_yellow "Remove snap"
      if REMOVE_OUTPUT=$(sudo snap remove --purge mastodon-server); then
        echo_green "Snap removal completed successfully"
      else
        echo_red "Snap removal failed"
        echo_yellow "$REMOVE_OUTPUT"
        exit 1
      fi
