name: test
run-name: Test installation
inputs:
  snap:
    required: true
    type: string
  upgrade:
    required: false
    type: boolean
    default: false
runs:
  using: composite
  steps:
  - name: define color commands
    shell: bash
    run: |
      RED="\033[31m"
      GREEN="\033[32m"
      YELLOW="\033[33m"
      RESET="\033[0m"
      SHEBANG="#!/bin/bash"
      colorize() { echo "while IFS= read -r line; do echo -e \"$1\$line$RESET\"; done"; }
      mkdir -p ~/bin
      echo -e "$SHEBANG\n$(colorize $RED)" > ~/bin/red
      echo -e "$SHEBANG\n$(colorize $GREEN)" > ~/bin/green
      echo -e "$SHEBANG\n$(colorize $YELLOW)" > ~/bin/yellow
      sudo chmod +x ~/bin/*
      echo "$HOME/bin" >> $GITHUB_PATH
  - name: set permissions on resolv.conf
    shell: bash
    run: sudo chmod 644 /etc/resolv.conf
  - name: enable memory overcommit
    shell: bash
    run: sudo sysctl vm.overcommit_memory=1
  - uses: actions/download-artifact@v4
    with:
      name: ${{ inputs.snap }}
  - name: print info
    shell: bash
    run: |
      echo "Run tests for ${{ inputs.snap }}" | yellow
  - name: set environment
    id: env
    shell: bash
    run: |
      echo "Set environment variables" | yellow
      echo "DOMAIN=local.host" >> $GITHUB_OUTPUT
      echo "USERNAME=test_admin" >> $GITHUB_OUTPUT
      echo "EMAIL=admin@local.host" >> $GITHUB_OUTPUT
      echo "HTTP_PORT=81" >> $GITHUB_OUTPUT
      echo "HTTPS_PORT=444" >> $GITHUB_OUTPUT
      echo "COMPOSE_FORM_FILE=/var/snap/mastodon-server/current/mastodon/app/javascript/mastodon/features/compose/components/compose_form.jsx" >> $GITHUB_OUTPUT
      echo "STATUS_LENGTH_VALIDATOR_FILE=/var/snap/mastodon-server/current/mastodon/app/validators/status_length_validator.rb" >> $GITHUB_OUTPUT
      echo "STATUS_LENGTH=500" >> $GITHUB_OUTPUT
  - name: setup host
    shell: bash
    run: |
      echo "Setup host system" | yellow
      sudo sh -c "echo '127.0.0.1 ${{ steps.env.outputs.DOMAIN }}' >> /etc/hosts"

  ##############################################################################
  # Install or refresh over previous version

  - name: install and setup previous snap
    if: ${{ inputs.upgrade == 'true' }}
    shell: bash
    run: |
      echo "Install previous snap" | yellow
      sudo snap install mastodon-server
      sleep 10
      sudo snap set mastodon-server domain="${{ steps.env.outputs.DOMAIN }}"
      sudo snap set mastodon-server email="${{ steps.env.outputs.EMAIL }}"
      sudo mastodon-server.setup -u ${{ steps.env.outputs.USERNAME }} -c no
      sleep 10
  - name: install snap
    shell: bash
    run: |
      echo "Install snap (upgrade=${{ inputs.upgrade }})" | yellow
      if INSTALL_OUTPUT=$(sudo snap install --dangerous ${{ inputs.snap }}); then
        echo "Snap installation completed successfully" | green
      else
        echo "Snap installation failed" | red
        echo "$INSTALL_OUTPUT" | yellow
        exit 1
      fi
      sleep 10
  - name: print snap install tasks
    if: ${{ env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "Print snap install tasks" | yellow
      snap debug timings --last=install
  - name: print snap refresh tasks
    if: ${{ env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "Print snap refresh tasks" | yellow
      snap debug timings --last=refresh
  - name: test setup
    if: ${{ inputs.upgrade == 'false' }}
    shell: bash
    run: |
      echo "Test setup" | yellow
      sudo snap set mastodon-server domain="${{ steps.env.outputs.DOMAIN }}"
      sudo snap set mastodon-server email="${{ steps.env.outputs.EMAIL }}"
      if sudo mastodon-server.setup -u ${{ steps.env.outputs.USERNAME }} -c no; then
        echo "Mastodon setup completed successfully" | green
      else
        echo "Mastodon setup failed" | red
        echo "Snap logs:" | yellow
        sudo snap logs mastodon-server -n=all | yellow
        exit 1
      fi
      sleep 30
  - name: print snap settings
    shell: bash
    run: |
      echo "Print snap settings" | yellow
      if SETTINGS=$(sudo snap get mastodon-server -d); then
        echo "$SETTINGS" | green
      else
        echo "Snap settings could not be retrieved" | red
        echo "$SETTINGS" | red
        exit 1
      fi
  - name: check services
    shell: bash
    run: |
      echo "Check service statuses" | yellow
      check_service_status() {
        STATUS=$(snap services mastodon-server | sed -rn "s/.*\.$1 +([a-z]+) +([a-z]+).*/\1,\2/p")
        if [ "$STATUS" = "enabled,active" ]; then
          echo "$1 $STATUS" | green
        else
          echo "$1 $STATUS" | red
          echo "$(snap services mastodon-server)" | yellow
          echo
          echo "Snap logs for $1:" | yellow
          sudo snap logs mastodon-server.$1 -n=all | yellow
          if sudo test -f "/var/snap/mastodon-server/current/logs/$1.log"; then
            echo
            echo "Log file for $1:" | yellow
            sudo cat "/var/snap/mastodon-server/current/logs/$1.log" | yellow
          fi
          exit 1
        fi
      }
      check_service_status redis
      check_service_status postgres
      check_service_status backend
      check_service_status sidekiq
      check_service_status streaming
      check_service_status nginx
  - name: check reachability
    shell: bash
    run: |
      echo "Check reachability" | yellow
      HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve ${{ steps.env.outputs.DOMAIN }}:80:127.0.0.1 http://${{ steps.env.outputs.DOMAIN }}:80)
      if [ "$HTTP_STATUS" -eq 200 ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "HTTP_STATUS=$HTTP_STATUS" | yellow
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: generate ssl certificates
    shell: bash
    run: |
      echo "Generate SSL certificate" | yellow
      CERT_DIR="/var/snap/mastodon-server/common/certs/${{ steps.env.outputs.DOMAIN }}_ecc"
      sudo mkdir -p "$CERT_DIR"
      echo "Create self signed certificate"
      sudo openssl req -x509 -newkey rsa:2048 -sha256 -keyout "$CERT_DIR/${{ steps.env.outputs.DOMAIN }}.key" -days 1 -nodes -out "$CERT_DIR/fullchain.cer" -subj "/CN=${{ steps.env.outputs.DOMAIN }}"
      echo "Restart mastodon-server.nginx"
      sudo snap restart mastodon-server.nginx
      sleep 10
  - name: check if https config is created
    shell: bash
    run: |
      echo "Check if HTTPS is enabled" | yellow
      if sudo test -f "/var/snap/mastodon-server/current/nginx/config/mastodon-https.conf"; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        exit 1
      fi
  - name: change http/https ports
    shell: bash
    run: |
      echo "Change HTTP/HTTPS ports" | yellow
      sudo snap set mastodon-server ports.http=${{ steps.env.outputs.HTTP_PORT }} ports.https=${{ steps.env.outputs.HTTPS_PORT }}
      sleep 30
  - name: check http port
    shell: bash
    run: |
      echo "Check HTTP port" | yellow
      HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve "${{ steps.env.outputs.DOMAIN }}:${{ steps.env.outputs.HTTP_PORT }}:127.0.0.1" "http://${{ steps.env.outputs.DOMAIN }}:${{ steps.env.outputs.HTTP_PORT }}")
      if [ "$HTTP_STATUS" -eq 301 ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "HTTP_STATUS=$HTTP_STATUS" | yellow
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: check https port
    shell: bash
    run: |
      echo "Check HTTPS port" | yellow
      HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --resolve "${{ steps.env.outputs.DOMAIN }}:${{ steps.env.outputs.HTTPS_PORT }}:127.0.0.1" "https://${{ steps.env.outputs.DOMAIN }}:${{ steps.env.outputs.HTTPS_PORT }}" --insecure)
      if [ "$HTTPS_STATUS" -eq 200 ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "HTTPS_STATUS=$HTTPS_STATUS" | yellow
        sudo snap logs "mastodon-server"
        exit 1
      fi
  - name: connect removable-media
    shell: bash
    run: |
      echo "Connect removalbe-media" | yellow
      sudo snap connect mastodon-server:removable-media
  - name: change media dir
    shell: bash
    run: |
      echo "Change media dir" | yellow
      sudo mkdir -p ~/media
      if COMMAND_OUTPUT=$(sudo mastodon-server.external-media-dir ~/media); then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        echo "$COMMAND_OUTPUT" | yellow
        exit 1
      fi
  - name: test export
    shell: bash
    run: |
      echo "Test export" | yellow
      if EXPORT_OUTPUT=$(sudo mastodon-server.export); then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        echo "$EXPORT_OUTPUT" | yellow
        exit 1
      fi
      BACKUP_DIR=$(echo "$EXPORT_OUTPUT" | sed -rn "s|^Export backup to .*/([0-9]+-[0-9]+)$|\1|p")
      echo "backup_dir=$BACKUP_DIR" >> $GITHUB_OUTPUT
    id: export
  - name: test restore
    shell: bash
    run: |
      echo "Test restore" | yellow
      if RESTORE_OUTPUT=$(bash -c "yes || true" | sudo mastodon-server.restore ${{ steps.export.outputs.backup_dir }}); then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        echo "$RESTORE_OUTPUT" | yellow
        exit 1
      fi
  - name: trigger recompile
    shell: bash
    run: |
      echo "Trigger recompile" | yellow
      if sudo snap set mastodon-server status.length=${{ steps.env.outputs.STATUS_LENGTH }}; then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        sudo snap logs mastodon-server.recompile-assets -n=all | yellow
        exit 1
      fi
  - name: check max chars
    shell: bash
    run: |
      echo "Check 'MAX_CHARS' in ${{ steps.env.outputs.STATUS_LENGTH_VALIDATOR_FILE }}" | yellow
      MAX_CHARS=$(sudo sed -rn "s/^.*MAX_CHARS = ([0-9]+).*$/\1/p" "${{ steps.env.outputs.STATUS_LENGTH_VALIDATOR_FILE }}")
      if [ "$MAX_CHARS" -eq "${{ steps.env.outputs.STATUS_LENGTH }}" ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "MAX_CHARS = $MAX_CHARS" | yellow
        exit 1
      fi
  - name: check fulltext length
    shell: bash
    run: |
      echo "Check 'length(fulltext)' in ${{ steps.env.outputs.COMPOSE_FORM_FILE }}" | yellow
      FULLTEXT_LENGTH=$(sudo sed -rn "s/^.*length\(fulltext\) > ([0-9]+).*$/\1/p" "${{ steps.env.outputs.COMPOSE_FORM_FILE }}")
      if [ "$FULLTEXT_LENGTH" -eq "${{ steps.env.outputs.STATUS_LENGTH }}" ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "length(fulltext) > $FULLTEXT_LENGTH" | yellow
        exit 1
      fi
  - name: check character counter
    shell: bash
    run: |
      echo "Check 'CharacterCounter max' in ${{ steps.env.outputs.COMPOSE_FORM_FILE }}" | yellow
      MAX_CHARACTER_COUNTER=$(sudo sed -rn "s/^.*CharacterCounter max=\{([0-9]+)\}.*$/\1/p" "${{ steps.env.outputs.COMPOSE_FORM_FILE }}")
      if [ "$MAX_CHARACTER_COUNTER" -eq "${{ steps.env.outputs.STATUS_LENGTH }}" ]; then
        echo "Check passed" | green
      else
        echo "Check failed" | red
        echo "CharacterCounter max={$MAX_CHARACTER_COUNTER}" | yellow
        exit 1
      fi
  - name: test rails console
    shell: bash
    run: |
      echo "Test rails console" | yellow
      if CONSOLE_OUTPUT="$(echo "exit" | sudo mastodon-server.console --sandbox)"; then
        if ! [ -z "$(echo "'"$CONSOLE_OUTPUT"'" | grep 'Loading production environment')" ]; then
          echo "Test passed" | green
        else
          echo "Test failed" | red
          echo "$CONSOLE_OUTPUT" | yellow
          exit 1
        fi
      fi
  - name: test postgres dump
    shell: bash
    run: |
      echo "Test postgres dump" | yellow
      sudo mastodon-server.db-dump > ~/dump.sql
      if sudo grep -q "DROP DATABASE mastodon" ~/dump.sql; then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        sudo head ~/dump.sql 2>/dev/null | yellow
        exit 1
      fi
  - name: test announce command
    shell: bash
    run: |
      echo "Test announce command" | yellow
      if ANNOUNCE_OUTPUT=$(sudo mastodon-server.announce "Test announcement"); then
        echo "Test passed" | green
      else
        echo "Test failed" | red
        echo "$ANNOUNCE_OUTPUT" | yellow
        exit 1
      fi

  ##############################################################################
  # Refresh same version

  - name: refresh snap
    if: ${{ inputs.upgrade == 'false' }}
    shell: bash
    run: |
      echo "Refresh snap" | yellow
      if REFRESH_OUTPUT=$(sudo snap install --dangerous ${{ inputs.snap }}); then
        echo "Snap refresh completed successfully" | green
      else
        echo "Snap refresh failed" | red
        echo "$REFRESH_OUTPUT" | yellow
        exit 1
      fi
  - name: print snap install tasks
    if: ${{ env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "Print snap install tasks" | yellow
      snap debug timings --last=install
  - name: print snap refresh tasks
    if: ${{ env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "Print snap refresh tasks" | yellow
      snap debug timings --last=refresh
  - name: print service statuses
    if: ${{ failure() }}
    shell: bash
    run: |
      echo "Print service statuses" | yellow
      snap services mastodon-server
  - name: check logs for warnings
    if: ${{ success() || failure() }}
    shell: bash
    run: |
      echo "Check logs for warnings" | yellow
      LOG_WARNINGS=$(sudo grep -i warning /var/snap/mastodon-server/current/logs/*.log || true)
      if [ -z "$LOG_WARNINGS" ]; then
        echo "No warnings" | green
      else
        echo "$LOG_WARNINGS" | yellow
      fi
  - name: check logs for errors
    if: ${{ success() || failure() }}
    shell: bash
    run: |
      echo "Check logs for errors" | yellow
      LOG_ERRORS=$(sudo grep -iE "error|failure|failed" /var/snap/mastodon-server/current/logs/*.log || true)
      LOG_ERRORS=$(echo "$LOG_ERRORS" | grep -v "SMTP-AUTH requested but missing user name" || true)
      if [ -z "$LOG_ERRORS" ]; then
        echo "No errors" | green
      else
        echo "$LOG_ERRORS" | red
      fi
  - name: show postgres log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::postgres.log:"
      cat /var/snap/mastodon-server/current/logs/postgres.log
      echo "::endgroup::"
  - name: show nginx log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::nginx.log:"
      cat /var/snap/mastodon-server/current/logs/nginx.log
      echo "::endgroup::"
  - name: show redis log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::redis.log:"
      cat /var/snap/mastodon-server/current/logs/redis.log
      echo "::endgroup::"
  - name: show backend log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::backend.log:"
      cat /var/snap/mastodon-server/current/logs/backend.log
      echo "::endgroup::"
  - name: show streaming log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::streaming.log:"
      cat /var/snap/mastodon-server/current/logs/streaming.log
      echo "::endgroup::"
  - name: show sidekiq log
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::sidekiq.log:"
      cat /var/snap/mastodon-server/current/logs/sidekiq.log
      echo "::endgroup::"
  - name: remove snap
    shell: bash
    run: |
      echo "Remove snap" | yellow
      if REMOVE_OUTPUT=$(sudo snap remove --purge mastodon-server); then
        echo "Snap removal completed successfully" | green
      else
        echo "Snap removal failed" | red
        echo "$REMOVE_OUTPUT" | yellow
        exit 1
      fi

  ##############################################################################
  # Debugging
  - name: show postgres journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl postgres:"
      sudo journalctl -xu snap.mastodon-server.postgres.service --all
      echo "::endgroup::"
  - name: show postgres-upgrade journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl postgres-upgrade:"
      sudo journalctl -xu snap.mastodon-server.postgres-upgrade.service --all
      echo "::endgroup::"
  - name: show nginx journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl nginx:"
      sudo journalctl -xu snap.mastodon-server.nginx.service --all
      echo "::endgroup::"
  - name: show redis journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl redis:"
      sudo journalctl -xu snap.mastodon-server.redis.service --all
      echo "::endgroup::"
  - name: show backend journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl backend:"
      sudo journalctl -xu snap.mastodon-server.backend.service --all
      echo "::endgroup::"
  - name: show streaming journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl streaming:"
      sudo journalctl -xu snap.mastodon-server.streaming.service --all
      echo "::endgroup::"
  - name: show sidekiq journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl sidekiq:"
      sudo journalctl -xu snap.mastodon-server.sidekiq.service --all
      echo "::endgroup::"
  - name: show migrations journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl migrations:"
      sudo journalctl -xu snap.mastodon-server.migrations.service --all
      echo "::endgroup::"
  - name: show recompile-assets journalctl
    if: ${{ failure() || env.ACTIONS_RUNNER_DEBUG == 'true' }}
    shell: bash
    run: |
      echo "::group::journalctl recompile-assets:"
      sudo journalctl -xu snap.mastodon-server.recompile-assets.service --all
      echo "::endgroup::"
